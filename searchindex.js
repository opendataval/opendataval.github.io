Search.setIndex({"docnames": ["generated/generated/generated/opendataval.dataloader.datasets.datasets", "generated/generated/generated/opendataval.dataloader.datasets.imagesets", "generated/generated/generated/opendataval.dataloader.datasets.nlpsets", "generated/generated/opendataval.dataloader.CatDataset", "generated/generated/opendataval.dataloader.DataFetcher", "generated/generated/opendataval.dataloader.Register", "generated/generated/opendataval.dataloader.cache", "generated/generated/opendataval.dataloader.datasets", "generated/generated/opendataval.dataloader.datasets.datasets", "generated/generated/opendataval.dataloader.datasets.imagesets", "generated/generated/opendataval.dataloader.datasets.nlpsets", "generated/generated/opendataval.dataloader.mix_labels", "generated/generated/opendataval.dataloader.one_hot_encode", "generated/generated/opendataval.dataval.AME", "generated/generated/opendataval.dataval.BetaShapley", "generated/generated/opendataval.dataval.DVRL", "generated/generated/opendataval.dataval.DataBanzhaf", "generated/generated/opendataval.dataval.DataEvaluator", "generated/generated/opendataval.dataval.DataOob", "generated/generated/opendataval.dataval.DataShapley", "generated/generated/opendataval.dataval.GrTMCSampler", "generated/generated/opendataval.dataval.InfluenceFunction", "generated/generated/opendataval.dataval.InfluenceSubsample", "generated/generated/opendataval.dataval.KNNShapley", "generated/generated/opendataval.dataval.LavaEvaluator", "generated/generated/opendataval.dataval.LeaveOneOut", "generated/generated/opendataval.dataval.ModelLessMixin", "generated/generated/opendataval.dataval.ModelMixin", "generated/generated/opendataval.dataval.RandomEvaluator", "generated/generated/opendataval.dataval.RobustVolumeShapley", "generated/generated/opendataval.dataval.Sampler", "generated/generated/opendataval.dataval.ShapEvaluator", "generated/generated/opendataval.dataval.TMCSampler", "generated/generated/opendataval.experiment.ExperimentMediator", "generated/generated/opendataval.experiment.exper_methods", "generated/generated/opendataval.model.ClassifierSkLearnWrapper", "generated/generated/opendataval.model.ClassifierUnweightedSkLearnWrapper", "generated/generated/opendataval.model.GradientModel", "generated/generated/opendataval.model.Model", "generated/generated/opendataval.model.ModelFactory", "generated/generated/opendataval.model.RegressionSkLearnWrapper", "generated/generated/opendataval.model.TorchClassMixin", "generated/generated/opendataval.model.TorchGradMixin", "generated/generated/opendataval.model.TorchPredictMixin", "generated/generated/opendataval.model.TorchRegressMixin", "generated/opendataval.__version__", "generated/opendataval.dataloader", "generated/opendataval.dataloader.CatDataset", "generated/opendataval.dataloader.DataFetcher", "generated/opendataval.dataloader.Register", "generated/opendataval.dataloader.cache", "generated/opendataval.dataloader.datasets", "generated/opendataval.dataloader.datasets.datasets", "generated/opendataval.dataloader.datasets.imagesets", "generated/opendataval.dataloader.datasets.nlpsets", "generated/opendataval.dataloader.mix_labels", "generated/opendataval.dataloader.one_hot_encode", "generated/opendataval.dataval", "generated/opendataval.dataval.AME", "generated/opendataval.dataval.BetaShapley", "generated/opendataval.dataval.DVRL", "generated/opendataval.dataval.DataBanzhaf", "generated/opendataval.dataval.DataEvaluator", "generated/opendataval.dataval.DataOob", "generated/opendataval.dataval.DataShapley", "generated/opendataval.dataval.GrTMCSampler", "generated/opendataval.dataval.InfluenceFunction", "generated/opendataval.dataval.InfluenceSubsample", "generated/opendataval.dataval.KNNShapley", "generated/opendataval.dataval.LavaEvaluator", "generated/opendataval.dataval.LeaveOneOut", "generated/opendataval.dataval.ModelLessMixin", "generated/opendataval.dataval.ModelMixin", "generated/opendataval.dataval.RandomEvaluator", "generated/opendataval.dataval.RobustVolumeShapley", "generated/opendataval.dataval.Sampler", "generated/opendataval.dataval.ShapEvaluator", "generated/opendataval.dataval.TMCSampler", "generated/opendataval.experiment", "generated/opendataval.experiment.ExperimentMediator", "generated/opendataval.experiment.exper_methods", "generated/opendataval.model", "generated/opendataval.model.ClassifierSkLearnWrapper", "generated/opendataval.model.ClassifierUnweightedSkLearnWrapper", "generated/opendataval.model.GradientModel", "generated/opendataval.model.Model", "generated/opendataval.model.ModelFactory", "generated/opendataval.model.RegressionSkLearnWrapper", "generated/opendataval.model.TorchClassMixin", "generated/opendataval.model.TorchGradMixin", "generated/opendataval.model.TorchPredictMixin", "generated/opendataval.model.TorchRegressMixin", "generated/opendataval.util.load_mediator_output", "generated/opendataval.util.set_random_state", "index", "leaderboards", "license", "modules", "opendataval", "opendataval.dataloader", "opendataval.dataloader.datasets", "opendataval.dataval", "opendataval.dataval.ame", "opendataval.dataval.csshap", "opendataval.dataval.dvrl", "opendataval.dataval.influence", "opendataval.dataval.knnshap", "opendataval.dataval.lava", "opendataval.dataval.margcontrib", "opendataval.dataval.oob", "opendataval.dataval.random", "opendataval.dataval.volume", "opendataval.experiment", "opendataval.model", "paper"], "filenames": ["generated/generated/generated/opendataval.dataloader.datasets.datasets.rst", "generated/generated/generated/opendataval.dataloader.datasets.imagesets.rst", "generated/generated/generated/opendataval.dataloader.datasets.nlpsets.rst", "generated/generated/opendataval.dataloader.CatDataset.rst", "generated/generated/opendataval.dataloader.DataFetcher.rst", "generated/generated/opendataval.dataloader.Register.rst", "generated/generated/opendataval.dataloader.cache.rst", "generated/generated/opendataval.dataloader.datasets.rst", "generated/generated/opendataval.dataloader.datasets.datasets.rst", "generated/generated/opendataval.dataloader.datasets.imagesets.rst", "generated/generated/opendataval.dataloader.datasets.nlpsets.rst", "generated/generated/opendataval.dataloader.mix_labels.rst", "generated/generated/opendataval.dataloader.one_hot_encode.rst", "generated/generated/opendataval.dataval.AME.rst", "generated/generated/opendataval.dataval.BetaShapley.rst", "generated/generated/opendataval.dataval.DVRL.rst", "generated/generated/opendataval.dataval.DataBanzhaf.rst", "generated/generated/opendataval.dataval.DataEvaluator.rst", "generated/generated/opendataval.dataval.DataOob.rst", "generated/generated/opendataval.dataval.DataShapley.rst", "generated/generated/opendataval.dataval.GrTMCSampler.rst", "generated/generated/opendataval.dataval.InfluenceFunction.rst", "generated/generated/opendataval.dataval.InfluenceSubsample.rst", "generated/generated/opendataval.dataval.KNNShapley.rst", "generated/generated/opendataval.dataval.LavaEvaluator.rst", "generated/generated/opendataval.dataval.LeaveOneOut.rst", "generated/generated/opendataval.dataval.ModelLessMixin.rst", "generated/generated/opendataval.dataval.ModelMixin.rst", "generated/generated/opendataval.dataval.RandomEvaluator.rst", "generated/generated/opendataval.dataval.RobustVolumeShapley.rst", "generated/generated/opendataval.dataval.Sampler.rst", "generated/generated/opendataval.dataval.ShapEvaluator.rst", "generated/generated/opendataval.dataval.TMCSampler.rst", "generated/generated/opendataval.experiment.ExperimentMediator.rst", "generated/generated/opendataval.experiment.exper_methods.rst", "generated/generated/opendataval.model.ClassifierSkLearnWrapper.rst", "generated/generated/opendataval.model.ClassifierUnweightedSkLearnWrapper.rst", "generated/generated/opendataval.model.GradientModel.rst", "generated/generated/opendataval.model.Model.rst", "generated/generated/opendataval.model.ModelFactory.rst", "generated/generated/opendataval.model.RegressionSkLearnWrapper.rst", "generated/generated/opendataval.model.TorchClassMixin.rst", "generated/generated/opendataval.model.TorchGradMixin.rst", "generated/generated/opendataval.model.TorchPredictMixin.rst", "generated/generated/opendataval.model.TorchRegressMixin.rst", "generated/opendataval.__version__.rst", "generated/opendataval.dataloader.rst", "generated/opendataval.dataloader.CatDataset.rst", "generated/opendataval.dataloader.DataFetcher.rst", "generated/opendataval.dataloader.Register.rst", "generated/opendataval.dataloader.cache.rst", "generated/opendataval.dataloader.datasets.rst", "generated/opendataval.dataloader.datasets.datasets.rst", "generated/opendataval.dataloader.datasets.imagesets.rst", "generated/opendataval.dataloader.datasets.nlpsets.rst", "generated/opendataval.dataloader.mix_labels.rst", "generated/opendataval.dataloader.one_hot_encode.rst", "generated/opendataval.dataval.rst", "generated/opendataval.dataval.AME.rst", "generated/opendataval.dataval.BetaShapley.rst", "generated/opendataval.dataval.DVRL.rst", "generated/opendataval.dataval.DataBanzhaf.rst", "generated/opendataval.dataval.DataEvaluator.rst", "generated/opendataval.dataval.DataOob.rst", "generated/opendataval.dataval.DataShapley.rst", "generated/opendataval.dataval.GrTMCSampler.rst", "generated/opendataval.dataval.InfluenceFunction.rst", "generated/opendataval.dataval.InfluenceSubsample.rst", "generated/opendataval.dataval.KNNShapley.rst", "generated/opendataval.dataval.LavaEvaluator.rst", "generated/opendataval.dataval.LeaveOneOut.rst", "generated/opendataval.dataval.ModelLessMixin.rst", "generated/opendataval.dataval.ModelMixin.rst", "generated/opendataval.dataval.RandomEvaluator.rst", "generated/opendataval.dataval.RobustVolumeShapley.rst", "generated/opendataval.dataval.Sampler.rst", "generated/opendataval.dataval.ShapEvaluator.rst", "generated/opendataval.dataval.TMCSampler.rst", "generated/opendataval.experiment.rst", "generated/opendataval.experiment.ExperimentMediator.rst", "generated/opendataval.experiment.exper_methods.rst", "generated/opendataval.model.rst", "generated/opendataval.model.ClassifierSkLearnWrapper.rst", "generated/opendataval.model.ClassifierUnweightedSkLearnWrapper.rst", "generated/opendataval.model.GradientModel.rst", "generated/opendataval.model.Model.rst", "generated/opendataval.model.ModelFactory.rst", "generated/opendataval.model.RegressionSkLearnWrapper.rst", "generated/opendataval.model.TorchClassMixin.rst", "generated/opendataval.model.TorchGradMixin.rst", "generated/opendataval.model.TorchPredictMixin.rst", "generated/opendataval.model.TorchRegressMixin.rst", "generated/opendataval.util.load_mediator_output.rst", "generated/opendataval.util.set_random_state.rst", "index.rst", "leaderboards.rst", "license.rst", "modules.rst", "opendataval.rst", "opendataval.dataloader.rst", "opendataval.dataloader.datasets.rst", "opendataval.dataval.rst", "opendataval.dataval.ame.rst", "opendataval.dataval.csshap.rst", "opendataval.dataval.dvrl.rst", "opendataval.dataval.influence.rst", "opendataval.dataval.knnshap.rst", "opendataval.dataval.lava.rst", "opendataval.dataval.margcontrib.rst", "opendataval.dataval.oob.rst", "opendataval.dataval.random.rst", "opendataval.dataval.volume.rst", "opendataval.experiment.rst", "opendataval.model.rst", "paper.rst"], "titles": ["opendataval.dataloader.datasets.datasets", "opendataval.dataloader.datasets.imagesets", "opendataval.dataloader.datasets.nlpsets", "opendataval.dataloader.CatDataset", "opendataval.dataloader.DataFetcher", "opendataval.dataloader.Register", "opendataval.dataloader.cache", "opendataval.dataloader.datasets", "opendataval.dataloader.datasets.datasets", "opendataval.dataloader.datasets.imagesets", "opendataval.dataloader.datasets.nlpsets", "opendataval.dataloader.mix_labels", "opendataval.dataloader.one_hot_encode", "opendataval.dataval.AME", "opendataval.dataval.BetaShapley", "opendataval.dataval.DVRL", "opendataval.dataval.DataBanzhaf", "opendataval.dataval.DataEvaluator", "opendataval.dataval.DataOob", "opendataval.dataval.DataShapley", "opendataval.dataval.GrTMCSampler", "opendataval.dataval.InfluenceFunction", "opendataval.dataval.InfluenceSubsample", "opendataval.dataval.KNNShapley", "opendataval.dataval.LavaEvaluator", "opendataval.dataval.LeaveOneOut", "opendataval.dataval.ModelLessMixin", "opendataval.dataval.ModelMixin", "opendataval.dataval.RandomEvaluator", "opendataval.dataval.RobustVolumeShapley", "opendataval.dataval.Sampler", "opendataval.dataval.ShapEvaluator", "opendataval.dataval.TMCSampler", "opendataval.experiment.ExperimentMediator", "opendataval.experiment.exper_methods", "opendataval.model.ClassifierSkLearnWrapper", "opendataval.model.ClassifierUnweightedSkLearnWrapper", "opendataval.model.GradientModel", "opendataval.model.Model", "opendataval.model.ModelFactory", "opendataval.model.RegressionSkLearnWrapper", "opendataval.model.TorchClassMixin", "opendataval.model.TorchGradMixin", "opendataval.model.TorchPredictMixin", "opendataval.model.TorchRegressMixin", "opendataval.__version__", "opendataval.dataloader", "opendataval.dataloader.CatDataset", "opendataval.dataloader.DataFetcher", "opendataval.dataloader.Register", "opendataval.dataloader.cache", "opendataval.dataloader.datasets", "opendataval.dataloader.datasets.datasets", "opendataval.dataloader.datasets.imagesets", "opendataval.dataloader.datasets.nlpsets", "opendataval.dataloader.mix_labels", "opendataval.dataloader.one_hot_encode", "opendataval.dataval", "opendataval.dataval.AME", "opendataval.dataval.BetaShapley", "opendataval.dataval.DVRL", "opendataval.dataval.DataBanzhaf", "opendataval.dataval.DataEvaluator", "opendataval.dataval.DataOob", "opendataval.dataval.DataShapley", "opendataval.dataval.GrTMCSampler", "opendataval.dataval.InfluenceFunction", "opendataval.dataval.InfluenceSubsample", "opendataval.dataval.KNNShapley", "opendataval.dataval.LavaEvaluator", "opendataval.dataval.LeaveOneOut", "opendataval.dataval.ModelLessMixin", "opendataval.dataval.ModelMixin", "opendataval.dataval.RandomEvaluator", "opendataval.dataval.RobustVolumeShapley", "opendataval.dataval.Sampler", "opendataval.dataval.ShapEvaluator", "opendataval.dataval.TMCSampler", "opendataval.experiment", "opendataval.experiment.ExperimentMediator", "opendataval.experiment.exper_methods", "opendataval.model", "opendataval.model.ClassifierSkLearnWrapper", "opendataval.model.ClassifierUnweightedSkLearnWrapper", "opendataval.model.GradientModel", "opendataval.model.Model", "opendataval.model.ModelFactory", "opendataval.model.RegressionSkLearnWrapper", "opendataval.model.TorchClassMixin", "opendataval.model.TorchGradMixin", "opendataval.model.TorchPredictMixin", "opendataval.model.TorchRegressMixin", "opendataval.util.load_mediator_output", "opendataval.util.set_random_state", "OpenDataVal Documentation", "OpenDataVal Leaderboards", "OpenDataVal license", "opendataval", "opendataval package", "opendataval.dataloader package", "opendataval.dataloader.datasets package", "opendataval.dataval package", "opendataval.dataval.ame package", "opendataval.dataval.csshap package", "opendataval.dataval.dvrl package", "opendataval.dataval.influence package", "opendataval.dataval.knnshap package", "opendataval.dataval.lava package", "opendataval.dataval.margcontrib package", "opendataval.dataval.oob package", "opendataval.dataval.random package", "opendataval.dataval.volume package", "opendataval.experiment package", "opendataval.model package", "OpenDataVal: a Unified Benchmark for Data Valuation"], "terms": {"default": [0, 4, 5, 6, 8, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 28, 29, 31, 32, 33, 39, 48, 49, 50, 52, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 73, 74, 76, 77, 79, 86, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "data": [0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 37, 47, 48, 49, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 84, 94, 95, 98, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113], "set": [0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 20, 29, 31, 32, 33, 47, 48, 49, 52, 53, 54, 55, 65, 74, 76, 77, 78, 79, 93, 98, 101, 105, 107, 108, 111, 112, 113], "function": [0, 1, 2, 4, 5, 8, 9, 10, 14, 21, 34, 46, 48, 49, 52, 53, 54, 59, 66, 78, 80, 81, 95, 98, 99, 100, 101, 104, 105, 107, 108, 112, 113], "torchvis": [1, 9, 53, 100], "us": [1, 2, 4, 7, 9, 10, 14, 15, 17, 19, 21, 23, 24, 26, 29, 30, 31, 33, 39, 48, 51, 53, 54, 59, 60, 62, 64, 66, 68, 69, 71, 74, 75, 76, 78, 79, 81, 86, 93, 94, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113], "depend": [1, 2, 9, 10, 30, 53, 54, 75, 100, 101, 108], "modul": [1, 2, 9, 10, 41, 42, 43, 44, 53, 54, 88, 89, 90, 91, 97], "attribut": [1, 2, 5, 9, 10, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 32, 35, 36, 37, 38, 40, 41, 42, 43, 44, 49, 53, 54, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 77, 82, 83, 84, 85, 87, 88, 89, 90, 91], "class": [1, 3, 4, 5, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 46, 47, 48, 49, 53, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 82, 83, 84, 85, 87, 88, 89, 90, 91, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113], "nlp": [2, 10, 54, 94, 99, 100], "huggingfac": [2, 10, 54, 100, 113], "transform": [2, 4, 5, 10, 48, 49, 54, 99, 100, 101, 102, 103, 104, 105, 108, 109, 111, 113], "dataset": [3, 4, 6, 18, 21, 22, 46, 47, 48, 50, 63, 66, 67, 94, 95, 98, 99, 101, 104, 105, 107, 108, 109, 112, 113, 114], "list": [3, 47, 98, 99, 100, 108, 109, 112, 113], "ani": [3, 5, 17, 21, 33, 35, 36, 39, 40, 47, 49, 62, 66, 79, 82, 83, 86, 87, 94, 96, 99, 101, 102, 104, 105, 108, 109, 111, 112, 113], "wrap": [3, 35, 36, 40, 47, 82, 83, 87, 98, 99, 100, 113], "index": [3, 47, 94, 99, 108, 112], "tupl": [3, 4, 17, 21, 39, 47, 48, 62, 66, 86, 99, 100, 101, 102, 104, 105, 107, 108, 109, 111, 112, 113], "we": [3, 11, 15, 18, 20, 23, 26, 31, 47, 55, 60, 63, 65, 68, 71, 76, 94, 99, 101, 103, 104, 105, 106, 108, 109, 112, 113], "would": [3, 17, 47, 62, 99, 101, 108], "like": [3, 47, 99, 104], "concat": [3, 15, 47, 60, 99, 104], "togeth": [3, 47, 99], "must": [3, 4, 5, 14, 20, 31, 32, 47, 48, 49, 59, 65, 76, 77, 99, 107, 108, 112, 113], "same": [3, 4, 11, 26, 29, 47, 48, 55, 71, 74, 99, 101, 107, 111, 112, 113], "length": [3, 4, 47, 48, 99, 112], "valueerror": [3, 4, 12, 39, 47, 48, 56, 86, 99, 107, 113], "If": [3, 4, 5, 29, 47, 48, 49, 74, 99, 104, 107, 111, 112, 113], "all": [3, 4, 5, 31, 33, 47, 48, 49, 76, 79, 94, 95, 96, 98, 99, 100, 105, 106, 107, 108, 109, 112], "input": [3, 4, 12, 15, 18, 26, 39, 47, 48, 56, 60, 63, 71, 86, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113], "ar": [3, 4, 5, 18, 20, 31, 47, 48, 49, 63, 65, 76, 78, 95, 98, 99, 100, 101, 102, 104, 107, 108, 109, 112, 113], "__init__": [3, 4, 5, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 47, 48, 49, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 82, 83, 84, 85, 87, 88, 89, 90, 91, 100], "method": [3, 4, 5, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 47, 48, 49, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 82, 83, 84, 85, 87, 88, 89, 90, 91, 98, 101, 108, 113], "dataset_nam": [4, 5, 48, 49, 99, 112], "str": [4, 5, 6, 7, 11, 17, 20, 21, 31, 32, 33, 39, 48, 49, 50, 51, 55, 62, 65, 66, 76, 77, 79, 86, 92, 98, 99, 100, 101, 102, 104, 105, 107, 108, 109, 111, 112, 113], "cache_dir": [4, 6, 48, 50, 99, 100, 112], "none": [4, 6, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 28, 29, 31, 32, 33, 39, 41, 42, 43, 44, 48, 50, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 73, 74, 76, 77, 79, 86, 88, 89, 90, 91, 93, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113], "force_download": [4, 6, 48, 50, 99, 100, 112], "bool": [4, 5, 6, 29, 33, 48, 49, 50, 74, 79, 99, 100, 107, 111, 112, 113], "fals": [4, 5, 6, 33, 48, 49, 50, 79, 99, 100, 107, 112], "random_st": [4, 13, 15, 16, 17, 18, 20, 22, 23, 24, 25, 28, 31, 32, 48, 58, 60, 61, 62, 63, 65, 67, 68, 69, 70, 73, 76, 77, 93, 98, 99, 101, 102, 104, 105, 106, 107, 108, 109, 110, 112], "randomst": [4, 13, 15, 16, 17, 18, 20, 22, 23, 24, 25, 28, 31, 32, 48, 58, 60, 61, 62, 63, 65, 67, 68, 69, 70, 73, 76, 77, 93, 98, 99, 101, 102, 104, 105, 106, 107, 108, 109, 110, 112], "load": [4, 7, 23, 48, 51, 68, 92, 98, 100, 104, 106, 107, 112, 113], "an": [4, 17, 23, 33, 46, 48, 57, 62, 68, 78, 79, 81, 94, 96, 98, 99, 100, 101, 104, 106, 107, 108, 112, 113], "experi": [4, 13, 17, 48, 58, 62, 95, 98, 99, 101, 102], "from": [4, 28, 37, 39, 48, 57, 73, 84, 86, 95, 96, 98, 99, 100, 101, 102, 104, 105, 107, 108, 110, 112, 113], "name": [4, 5, 6, 7, 33, 39, 46, 48, 49, 50, 51, 79, 86, 95, 98, 99, 100, 105, 112, 113], "facad": [4, 48, 99], "regist": [4, 7, 46, 48, 51, 57, 98, 100, 101, 112], "object": [4, 5, 11, 20, 31, 32, 46, 48, 49, 55, 65, 76, 77, 81, 98, 99, 100, 101, 107, 108, 111, 112, 113], "prepar": [4, 48, 99], "provid": [4, 30, 37, 38, 46, 48, 57, 75, 78, 84, 85, 94, 96, 98, 99, 100, 101, 107, 108, 112, 113], "api": [4, 17, 46, 48, 62, 78, 94, 98, 99, 108], "subsequ": [4, 48, 99], "split": [4, 29, 48, 74, 99, 111], "ad": [4, 5, 11, 48, 49, 55, 98, 99, 101, 108], "nois": [4, 11, 14, 20, 31, 48, 55, 59, 65, 76, 99, 100, 108, 112], "tensor": [4, 15, 23, 24, 33, 39, 48, 60, 68, 69, 79, 86, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113], "option": [4, 5, 6, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 31, 32, 33, 39, 48, 49, 50, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 76, 77, 79, 86, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113], "directori": [4, 6, 33, 48, 50, 79, 99, 112, 113], "where": [4, 48, 94, 99, 100, 107, 112], "cach": [4, 5, 17, 20, 30, 31, 32, 48, 49, 62, 65, 75, 76, 77, 99, 101, 103, 108, 112], "which": [4, 20, 29, 31, 32, 48, 65, 74, 76, 77, 99, 102, 107, 108, 111, 112, 113], "forc": [4, 6, 48, 50, 99, 112], "download": [4, 5, 6, 48, 49, 50, 99, 100, 112], "sourc": [4, 48, 94, 99, 107, 112], "url": [4, 6, 48, 50, 99, 100, 112, 114], "random": [4, 13, 15, 16, 17, 18, 20, 22, 23, 24, 25, 28, 31, 32, 48, 58, 60, 61, 62, 63, 65, 67, 68, 69, 70, 73, 76, 77, 93, 98, 99, 101, 102, 104, 105, 106, 107, 108, 109, 112], "initi": [4, 13, 15, 16, 17, 18, 20, 22, 23, 24, 25, 28, 31, 32, 41, 42, 43, 44, 48, 58, 60, 61, 62, 63, 65, 67, 68, 69, 70, 73, 76, 77, 88, 89, 90, 91, 94, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 112, 113], "state": [4, 13, 15, 16, 17, 18, 20, 22, 23, 24, 25, 28, 31, 32, 41, 42, 43, 44, 48, 58, 60, 61, 62, 63, 65, 67, 68, 69, 70, 73, 76, 77, 88, 89, 90, 91, 93, 94, 98, 99, 101, 102, 104, 105, 106, 107, 108, 109, 110, 112, 113], "datapoint": [4, 48, 99], "torch": [4, 15, 24, 39, 41, 42, 43, 44, 48, 60, 69, 86, 88, 89, 90, 91, 99, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112], "train": [4, 11, 13, 15, 17, 20, 22, 23, 26, 31, 32, 33, 48, 55, 58, 60, 62, 65, 67, 68, 71, 76, 77, 79, 81, 94, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113], "valid": [4, 11, 18, 21, 22, 29, 48, 55, 63, 66, 67, 74, 95, 99, 101, 103, 105, 107, 109, 111, 112], "test": [4, 34, 48, 78, 80, 99, 101, 102, 103, 104, 105, 108, 109, 111, 112], "covari": [4, 39, 46, 48, 86, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 113], "label": [4, 5, 11, 35, 36, 39, 46, 48, 49, 55, 82, 83, 86, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 113], "covar_dim": [4, 39, 48, 86, 99, 113], "int": [4, 13, 14, 15, 16, 18, 20, 22, 23, 31, 32, 35, 36, 39, 48, 58, 59, 60, 61, 63, 65, 67, 68, 76, 77, 82, 83, 86, 98, 99, 100, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113], "dimens": [4, 15, 39, 48, 60, 86, 99, 104, 107, 113], "label_dim": [4, 39, 48, 86, 99, 113], "num_point": [4, 22, 48, 67, 99, 105], "number": [4, 13, 15, 16, 18, 20, 22, 23, 29, 31, 32, 45, 48, 58, 60, 61, 63, 65, 67, 68, 74, 76, 77, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113], "point": [4, 11, 18, 22, 23, 33, 48, 55, 63, 67, 68, 79, 94, 99, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113], "total": [4, 48, 99, 112], "one_hot": [4, 5, 48, 49, 99], "true": [4, 29, 48, 74, 99, 100, 107, 111, 113], "ha": [4, 26, 48, 71, 99, 101, 107, 108, 112, 113], "categor": [4, 48, 99, 100, 101, 103, 113], "one": [4, 5, 18, 33, 34, 48, 49, 63, 79, 80, 98, 99, 101, 107, 108, 109, 112, 113], "hot": [4, 5, 12, 48, 49, 56, 98, 99, 107], "encod": [4, 5, 12, 48, 49, 56, 98, 99, 104, 107], "_indic": [4, 48, 99], "np": [4, 11, 17, 20, 31, 48, 55, 62, 65, 76, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113], "ndarrai": [4, 11, 12, 48, 55, 56, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "The": [4, 17, 26, 30, 48, 57, 62, 71, 75, 96, 98, 99, 100, 101, 104, 105, 107, 108, 113], "indic": [4, 11, 33, 48, 55, 79, 95, 99, 104, 108, 112, 113], "origin": [4, 29, 48, 74, 99, 111], "make": [4, 48, 81, 99, 113], "noisy_train_indic": [4, 11, 48, 55, 99, 112], "them": [4, 46, 48, 98, 99, 113], "covar": [4, 48, 99], "labl": [4, 48, 99], "correspond": [4, 48, 99, 102, 107, 112], "x": [4, 29, 48, 74, 98, 99, 100, 104, 107, 111, 112, 113], "y": [4, 14, 18, 20, 24, 31, 48, 59, 63, 65, 69, 76, 98, 99, 101, 103, 104, 106, 107, 108, 109, 113], "_": [4, 48, 99, 107], "access": [4, 33, 37, 48, 79, 84, 99, 112, 113], "raw": [4, 26, 48, 71, 99, 100, 101], "prior": [4, 20, 31, 48, 65, 76, 99, 100, 107, 108], "being": [4, 48, 99, 104], "keyerror": [4, 48, 99], "In": [4, 48, 78, 94, 99, 104, 112], "order": [4, 21, 37, 48, 66, 84, 99, 105, 107, 109, 113], "you": [4, 48, 99, 108], "creat": [4, 5, 39, 48, 49, 57, 86, 98, 101, 112, 113], "exce": [4, 48, 99], "other": [4, 48, 81, 96, 99, 108, 113], "word": [4, 17, 21, 33, 39, 48, 62, 66, 79, 81, 86, 99, 100, 101, 102, 104, 105, 106, 108, 109, 111, 112, 113], "valu": [4, 14, 15, 16, 17, 18, 20, 22, 26, 28, 31, 32, 48, 57, 59, 60, 61, 62, 63, 65, 67, 71, 73, 76, 77, 81, 94, 95, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113], "less": [4, 15, 23, 26, 48, 60, 68, 71, 99, 101, 104, 106, 112, 113], "than": [4, 15, 48, 60, 99, 104, 112, 113], "thei": [4, 30, 48, 75, 99, 108, 113], "float": [4, 11, 15, 18, 20, 22, 29, 31, 33, 48, 55, 60, 63, 65, 67, 74, 76, 79, 98, 99, 101, 102, 104, 105, 107, 108, 109, 111, 112, 113], "1": [4, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 31, 32, 45, 48, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 76, 77, 81, 94, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113], "0": [4, 11, 15, 18, 22, 28, 29, 45, 48, 55, 60, 63, 67, 73, 74, 81, 94, 98, 99, 100, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113], "anyth": [4, 48, 99], "els": [4, 48, 99], "error": [4, 6, 48, 50, 81, 99, 101, 113], "specifi": [4, 14, 22, 23, 24, 39, 48, 59, 67, 68, 69, 86, 99, 101, 105, 106, 107, 108, 111, 112, 113], "repeat": [4, 48, 99], "outsid": [4, 15, 48, 60, 99, 104], "rang": [4, 48, 99], "cacheabl": [5, 49, 99], "presplit": [5, 49, 99], "defin": [5, 46, 49, 99, 100, 112], "its": [5, 49, 99], "retriev": [5, 49, 99], "fetch": [5, 49, 99], "datafetch": [5, 7, 11, 33, 39, 46, 49, 51, 55, 57, 79, 86, 95, 98, 99, 100, 101, 112, 113], "also": [5, 49, 99, 112], "allow": [5, 46, 49, 99], "specif": [5, 23, 26, 39, 49, 68, 71, 86, 99, 101, 105, 106, 112, 113], "appli": [5, 49, 94, 99, 112, 113], "thi": [5, 11, 23, 39, 46, 49, 55, 68, 86, 94, 96, 99, 105, 106, 107, 108, 112, 113], "give": [5, 49, 98, 99], "benefit": [5, 37, 49, 84, 99, 113], "distinguish": [5, 49, 99], "separ": [5, 46, 49, 99, 103], "whether": [5, 49, 96, 99, 107, 113], "i": [5, 6, 11, 12, 17, 20, 21, 22, 23, 26, 29, 31, 32, 39, 49, 50, 55, 56, 57, 62, 65, 66, 67, 68, 71, 74, 76, 77, 81, 86, 94, 96, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 111, 112, 113], "can": [5, 7, 14, 19, 23, 29, 30, 31, 35, 36, 49, 51, 59, 64, 68, 74, 75, 76, 78, 82, 83, 94, 95, 99, 100, 103, 104, 106, 107, 108, 111, 112, 113], "wa": [5, 49, 99, 105, 107, 112, 113], "keep": [5, 49, 99], "track": [5, 49, 99, 114], "uniqu": [5, 11, 20, 31, 32, 49, 55, 65, 76, 77, 98, 99, 108], "duplic": [5, 49, 99], "user": [5, 33, 49, 79, 94, 99, 112], "path": [6, 33, 50, 79, 99, 100, 112], "file_nam": [6, 50, 99, 100, 112], "file": [6, 50, 95, 96, 99, 100, 112], "present": [6, 50, 99], "filepath": [6, 50, 92, 98, 99], "within": [6, 50, 94, 99, 104, 112], "regardless": [6, 50, 99], "httperror": [6, 50, 99], "http": [6, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 26, 29, 31, 32, 50, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 71, 74, 76, 77, 94, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114], "occur": [6, 50, 99], "dure": [6, 23, 50, 68, 99, 106], "catalog": [7, 51, 100], "pass": [7, 20, 21, 31, 32, 34, 39, 51, 65, 66, 76, 77, 80, 86, 99, 100, 103, 104, 105, 108, 112, 113], "need": [7, 51, 99, 100, 107, 112, 113], "fetcher": [11, 33, 39, 55, 79, 86, 95, 98, 101, 112, 113], "noise_r": [11, 55, 99], "2": [11, 20, 31, 35, 36, 55, 65, 76, 82, 83, 99, 100, 107, 108, 112, 113], "dict": [11, 17, 21, 33, 55, 62, 66, 79, 98, 99, 101, 102, 104, 105, 108, 109, 111, 112, 113], "mix": [11, 55, 99], "y_train": [11, 17, 55, 62, 99, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 113], "For": [11, 55, 99, 103, 104, 112, 113], "given": [11, 30, 55, 75, 99, 100, 108, 112, 113], "shift": [11, 55, 99], "forward": [11, 55, 99, 100, 104, 113], "up": [11, 33, 55, 78, 79, 99, 100, 108, 112, 113], "n": [11, 12, 55, 56, 98, 99, 100, 107, 108, 112], "step": [11, 55, 99], "prevent": [11, 55, 99], "select": [11, 55, 98, 99, 101, 102, 104, 105, 106, 107, 108, 109, 111, 113], "when": [11, 12, 39, 55, 56, 86, 99, 100, 101, 105, 107, 108, 112, 113], "hous": [11, 55, 99], "have": [11, 33, 35, 36, 55, 79, 82, 83, 94, 99, 104, 107, 112, 113], "proport": [11, 18, 22, 55, 63, 67, 99, 102, 105, 109, 112], "add": [11, 46, 55, 99, 104, 109, 112], "dictionari": [11, 55, 99, 111, 112], "updat": [11, 55, 99, 112], "y_valid": [11, 17, 55, 62, 99, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112], "One": [12, 25, 56, 70, 99, 108], "numpi": [12, 56, 99, 112], "arrai": [12, 17, 56, 62, 81, 94, 99, 100, 101, 108, 113], "shape": [12, 39, 56, 86, 99, 105, 113], "arg": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 39, 40, 41, 42, 43, 44, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 82, 83, 86, 87, 88, 89, 90, 91, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113], "kwarg": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 35, 36, 39, 40, 41, 42, 43, 44, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 82, 83, 86, 87, 88, 89, 90, 91, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113], "implement": [13, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 29, 58, 59, 60, 61, 63, 64, 66, 67, 68, 69, 70, 74, 94, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113], "averag": [13, 58, 102, 104, 105, 108], "margin": [13, 14, 19, 20, 29, 30, 31, 32, 58, 59, 64, 65, 74, 75, 76, 77, 102, 103, 108, 111], "effect": [13, 58, 94, 102], "valuat": [13, 14, 15, 16, 18, 19, 20, 23, 24, 25, 26, 29, 31, 32, 58, 59, 60, 61, 63, 64, 65, 68, 69, 70, 71, 74, 76, 77, 94, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112], "j": [13, 14, 15, 16, 18, 19, 20, 31, 32, 58, 59, 60, 61, 63, 64, 65, 76, 77, 100, 102, 104, 107, 108, 109, 112, 113], "lin": [13, 58, 102], "A": [13, 16, 19, 20, 24, 31, 32, 58, 61, 64, 65, 69, 76, 77, 96, 100, 102, 107, 108, 111, 112], "zhang": [13, 22, 58, 67, 100, 102, 105, 112], "m": [13, 24, 58, 69, 100, 102, 107, 112, 113], "lecuy": [13, 58, 102], "li": [13, 58, 102], "panda": [13, 58, 92, 98, 99, 102], "": [13, 15, 29, 58, 60, 74, 94, 100, 102, 103, 104, 108, 111, 112], "sen": [13, 58, 102], "measur": [13, 29, 58, 74, 102, 106, 111], "deep": [13, 58, 100, 102, 113], "learn": [13, 14, 15, 16, 19, 20, 24, 31, 32, 35, 36, 40, 58, 59, 60, 61, 64, 65, 69, 76, 77, 82, 83, 87, 94, 100, 102, 104, 107, 108], "predict": [13, 17, 18, 21, 23, 26, 33, 39, 43, 58, 62, 63, 66, 68, 71, 79, 81, 86, 90, 94, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113], "via": [13, 21, 22, 58, 66, 67, 98, 102, 105, 107, 112], "arxiv": [13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 26, 31, 32, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 71, 76, 77, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 114], "org": [13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 26, 31, 32, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 71, 76, 77, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113], "2022": [13, 16, 58, 61, 102, 103, 108], "avail": [13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 26, 31, 32, 58, 59, 60, 61, 63, 64, 65, 67, 68, 69, 71, 76, 77, 94, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 112, 113], "ab": [13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 26, 31, 32, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 71, 76, 77, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113], "2206": [13, 58, 102], "10013": [13, 58, 102], "num_model": [13, 16, 18, 22, 58, 61, 63, 67, 102, 108, 109], "model": [13, 16, 17, 18, 20, 21, 22, 23, 24, 26, 29, 31, 32, 33, 58, 61, 62, 63, 65, 66, 67, 68, 69, 71, 74, 76, 77, 79, 94, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112], "bag": [13, 18, 58, 63, 102, 109], "aggreg": [13, 18, 58, 63, 102, 109], "1000": [13, 15, 16, 18, 20, 22, 31, 32, 58, 60, 61, 63, 65, 67, 76, 77, 102, 104, 105, 108, 109], "beta": [14, 20, 31, 59, 65, 76, 108], "shaplei": [14, 19, 20, 23, 26, 29, 31, 32, 59, 64, 65, 68, 71, 74, 76, 77, 100, 101, 103, 106, 108, 111], "alpha": [14, 59, 108], "kwon": [14, 18, 20, 31, 59, 63, 65, 76, 96, 108, 109, 114], "zou": [14, 18, 19, 20, 31, 32, 59, 63, 64, 65, 76, 77, 96, 100, 108, 109, 114], "unifi": [14, 20, 31, 59, 65, 76, 94, 108], "reduc": [14, 20, 31, 59, 65, 76, 108], "framework": [14, 16, 20, 31, 59, 61, 65, 76, 94, 98, 108], "machin": [14, 16, 19, 20, 31, 32, 59, 61, 64, 65, 76, 77, 94, 100, 104, 108], "2021": [14, 20, 29, 31, 59, 65, 74, 76, 108, 111], "2110": [14, 20, 31, 59, 65, 76, 108], "14049": [14, 20, 31, 59, 65, 76, 108], "sampler": [14, 19, 20, 29, 31, 32, 59, 64, 65, 74, 76, 77, 101, 103, 111], "comput": [14, 16, 17, 19, 20, 21, 22, 26, 29, 30, 31, 32, 33, 59, 61, 62, 64, 65, 66, 67, 71, 74, 75, 76, 77, 79, 95, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113], "contribut": [14, 17, 19, 20, 29, 30, 31, 32, 59, 62, 64, 65, 74, 75, 76, 77, 101, 103, 108, 111], "found": [14, 19, 29, 31, 59, 64, 74, 76, 103, 108, 111, 112], "grtmcsampler": [14, 19, 29, 31, 59, 64, 74, 76, 108, 111], "distribut": [14, 59, 96, 99, 107, 108], "weight": [14, 35, 36, 59, 82, 83, 107, 108, 113], "4": [14, 25, 59, 70, 104, 108], "reinforc": [15, 60, 100, 104], "pytorch": [15, 60, 100, 104, 106], "yoon": [15, 60, 100, 104], "arik": [15, 60, 100, 104], "t": [15, 16, 24, 29, 36, 60, 61, 69, 74, 81, 83, 100, 104, 107, 108, 111, 113], "pfister": [15, 60, 100, 104], "2019": [15, 19, 20, 23, 26, 31, 32, 60, 64, 65, 68, 71, 76, 77, 100, 101, 104, 106, 108, 113], "1909": [15, 60, 100, 104], "11671": [15, 60, 100, 104], "hidden_dim": [15, 60, 104, 113], "hidden": [15, 60, 104, 113], "rl": [15, 60, 104], "multilay": [15, 60, 104, 113], "perceptron": [15, 60, 104, 113], "estim": [15, 18, 22, 60, 63, 67, 104, 105, 108, 109, 112], "ve": [15, 60, 104], "detail": [15, 60, 104], "datavalueestimatorrl": [15, 60, 104], "100": [15, 20, 31, 60, 65, 76, 104, 108], "layer_numb": [15, 60, 104], "layer": [15, 60, 100, 104, 113], "5": [15, 20, 31, 32, 60, 65, 76, 77, 81, 99, 104, 105, 108, 113], "comb_dim": [15, 60, 104], "after": [15, 60, 95, 99, 104, 109, 112], "how": [15, 17, 60, 62, 99, 101, 104, 107, 108, 109], "mani": [15, 30, 60, 75, 104, 108], "much": [15, 17, 60, 62, 101, 104, 107], "10": [15, 23, 60, 68, 98, 100, 104, 106, 113], "rl_epoch": [15, 60, 104], "epoch": [15, 17, 20, 31, 32, 60, 62, 65, 76, 77, 81, 101, 104, 108, 113], "rl_batch_siz": [15, 60, 104], "batch": [15, 21, 23, 60, 66, 68, 81, 98, 104, 105, 106, 107, 113], "size": [15, 23, 60, 68, 81, 99, 100, 104, 106, 107, 108, 112, 113], "32": [15, 23, 60, 68, 81, 104, 106, 113], "lr": [15, 60, 104, 113], "rate": [15, 60, 81, 104, 113], "01": [15, 60, 81, 104, 113], "threshold": [15, 20, 31, 60, 65, 76, 104, 108, 112], "search": [15, 60, 104, 112], "mai": [15, 21, 37, 60, 66, 84, 103, 104, 105, 108, 113], "get": [15, 60, 98, 99, 100, 102, 104, 107, 108], "stuck": [15, 60, 104], "certain": [15, 60, 101, 104], "bound": [15, 60, 104], "close": [15, 22, 60, 67, 104, 105], "thu": [15, 60, 104, 112], "encourag": [15, 60, 104], "9": [15, 60, 98, 104], "devic": [15, 24, 39, 60, 69, 86, 101, 104, 107, 112, 113], "acceler": [15, 24, 39, 60, 69, 86, 104, 107, 112, 113], "cpu": [15, 24, 39, 60, 69, 86, 101, 104, 107, 112, 113], "type": [15, 24, 39, 60, 69, 86, 98, 99, 100, 104, 107, 112, 113], "banzhaf": [16, 61, 101, 105], "wang": [16, 24, 61, 69, 107, 108], "r": [16, 23, 24, 25, 26, 61, 68, 69, 70, 71, 100, 101, 104, 106, 107, 108], "jia": [16, 23, 24, 26, 61, 68, 69, 71, 101, 106, 107, 108], "robust": [16, 29, 61, 74, 98, 108, 111], "2205": [16, 61, 108], "15466": [16, 61, 108], "take": [16, 20, 22, 31, 33, 61, 65, 67, 76, 79, 81, 99, 105, 108, 112, 113], "abstract": [17, 30, 31, 38, 62, 75, 76, 85, 101, 108, 113], "evalu": [17, 18, 20, 21, 24, 26, 29, 30, 32, 33, 34, 37, 62, 63, 65, 66, 69, 71, 74, 75, 77, 79, 80, 81, 84, 94, 95, 98, 102, 104, 105, 107, 108, 109, 111, 112, 113], "facilit": [17, 62, 101], "follow": [17, 29, 30, 57, 62, 74, 75, 95, 96, 99, 101, 104, 106, 107, 108, 111, 112], "exampl": [17, 18, 22, 35, 36, 40, 62, 63, 67, 82, 83, 87, 101, 105, 108, 109, 113], "work": [17, 57, 62, 99, 101, 108], "input_data": [17, 62, 98, 101, 102, 103, 104, 105, 108, 109, 111], "x_train": [17, 29, 62, 74, 99, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112, 113], "x_valid": [17, 62, 99, 101, 102, 103, 104, 105, 107, 108, 109, 111, 112], "train_data_valu": [17, 62, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111], "batch_siz": [17, 23, 62, 68, 100, 101, 106, 107, 113], "evaluate_data_valu": [17, 62, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111], "davaevalu": [17, 62, 101], "posit": [17, 21, 39, 62, 66, 86, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 113], "argument": [17, 21, 31, 33, 39, 62, 66, 76, 79, 81, 86, 98, 99, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113], "kei": [17, 21, 33, 39, 62, 66, 79, 81, 86, 99, 101, 102, 104, 105, 106, 108, 109, 111, 112, 113], "pred_model": [17, 26, 33, 62, 71, 79, 98, 101, 105, 112], "find": [17, 22, 62, 67, 94, 101, 103, 105, 108, 110, 112], "each": [17, 22, 62, 67, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113], "datum": [17, 62, 101], "toward": [17, 62, 101], "data_valu": [17, 62, 101, 103], "exper_method": [17, 57, 62, 78, 98, 101], "out": [18, 25, 63, 70, 96, 101, 102, 103, 104, 105, 108, 109, 111, 112], "metric": [18, 24, 29, 33, 63, 69, 74, 79, 97, 101, 102, 107, 109, 111, 112], "compar": [18, 26, 33, 63, 71, 79, 94, 95, 101, 107, 109, 112], "across": [18, 63, 94, 105, 108, 109], "sever": [18, 63, 78, 94, 98, 109, 112, 113], "includ": [18, 63, 94, 96, 105, 108, 109], "accuraci": [18, 33, 63, 79, 98, 100, 109, 112], "l2": [18, 63, 109], "distanc": [18, 63, 107, 109], "oob": [18, 63, 101], "simpl": [18, 63, 104, 108, 109], "effici": [18, 23, 26, 63, 68, 71, 101, 104, 106, 107, 108, 109], "2023": [18, 24, 63, 69, 96, 107, 109, 114], "2304": [18, 63, 109], "07718": [18, 63, 109], "sampl": [18, 20, 22, 29, 30, 31, 32, 63, 65, 67, 74, 75, 76, 77, 98, 102, 104, 105, 107, 108, 109, 111, 112, 113], "sample_s": [18, 63, 109], "len": [18, 63, 99, 109, 113], "ghorbani": [19, 20, 31, 32, 64, 65, 76, 77, 100, 108], "equit": [19, 20, 31, 32, 64, 65, 76, 77, 100, 108], "1904": [19, 20, 31, 32, 64, 65, 76, 77, 100, 108], "02868": [19, 20, 31, 32, 64, 65, 76, 77, 100, 108], "tmc": [20, 29, 31, 65, 74, 76, 108, 111], "termin": [20, 31, 65, 76, 108], "semivalu": [20, 29, 31, 32, 65, 74, 76, 77, 108, 111], "base": [20, 29, 30, 31, 32, 39, 65, 74, 75, 76, 77, 86, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113], "share": [20, 26, 32, 41, 42, 43, 44, 65, 71, 77, 88, 89, 90, 91, 101, 108, 113], "should": [20, 32, 65, 77, 94, 99, 103, 107, 108, 113], "gr_threshold": [20, 31, 65, 76, 108], "converg": [20, 31, 65, 76, 108], "gelman": [20, 31, 65, 76, 108], "rubin": [20, 31, 65, 76, 108], "statist": [20, 29, 31, 65, 74, 76, 104, 108, 111], "hard": [20, 31, 65, 76, 108], "so": [20, 31, 65, 76, 96, 107, 108, 113], "resort": [20, 31, 65, 76, 108], "mcmc": [20, 31, 32, 65, 76, 77, 108], "05": [20, 29, 31, 65, 74, 76, 108, 111, 112], "max_mc_epoch": [20, 31, 65, 76, 108], "max": [20, 31, 65, 76, 108], "outer": [20, 31, 32, 65, 76, 77, 108], "models_per_epoch": [20, 31, 65, 76, 108], "fit": [20, 22, 31, 35, 36, 65, 67, 76, 82, 83, 96, 102, 105, 108, 113], "per": [20, 31, 65, 76, 99, 104, 108, 112], "check": [20, 31, 65, 76, 99, 104, 108, 112], "gr": [20, 29, 31, 65, 74, 76, 108, 111], "min_model": [20, 31, 65, 76, 108], "minimum": [20, 31, 32, 65, 76, 77, 108, 113], "befor": [20, 31, 65, 76, 108], "min_cardin": [20, 31, 32, 65, 76, 77, 108], "cardin": [20, 22, 31, 32, 65, 67, 76, 77, 105, 108], "cache_nam": [20, 30, 31, 32, 65, 75, 76, 77, 103, 108], "disabl": [20, 31, 32, 65, 76, 77, 108, 113], "influenc": [21, 22, 66, 67, 101, 112], "todo": [21, 37, 66, 84, 105, 113], "gradient": [21, 37, 42, 66, 84, 89, 99, 104, 105, 107, 113], "save": [21, 66, 95, 99, 100, 105, 112], "time": [21, 23, 33, 34, 66, 68, 79, 80, 98, 105, 106, 107, 108, 112, 113], "space": [21, 66, 105, 107], "h": [21, 24, 66, 69, 103, 105, 107], "current": [21, 66, 105, 107, 112, 113], "first": [21, 39, 66, 86, 105, 107, 112, 113], "p": [21, 22, 66, 67, 100, 104, 105, 107, 113], "w": [21, 66, 100, 105, 107, 108, 113], "koh": [21, 66, 105], "liang": [21, 66, 96, 105, 114], "understand": [21, 66, 100, 105, 113], "black": [21, 66, 105], "box": [21, 66, 105], "2017": [21, 66, 100, 105, 112], "1703": [21, 66, 105], "04730": [21, 66, 105], "grad_arg": [21, 66, 105], "grad": [21, 66, 98, 105], "grad_kwarg": [21, 66, 105], "through": [22, 67, 100, 104, 105, 108, 113], "subsampl": [22, 67, 105, 107], "relat": [22, 67, 81, 105, 113], "v": [22, 67, 100, 105, 112, 113], "feldman": [22, 67, 105, 112], "c": [22, 29, 67, 74, 96, 100, 103, 105, 111, 112], "what": [22, 67, 99, 105, 112, 113], "neural": [22, 29, 41, 42, 43, 44, 67, 74, 88, 89, 90, 91, 105, 111, 112, 113, 114], "network": [22, 41, 42, 43, 44, 67, 88, 89, 90, 91, 105, 112, 113], "memor": [22, 67, 105, 112], "why": [22, 67, 105, 112], "discov": [22, 67, 105, 112], "long": [22, 67, 105, 112], "tail": [22, 67, 105, 112], "2020": [22, 67, 100, 105, 107, 112], "2008": [22, 67, 105, 112], "03703": [22, 67, 105, 112], "subset": [22, 67, 99, 102, 105, 107, 108, 112], "7": [22, 67, 105], "knn": [23, 26, 68, 71, 101, 106, 112], "mixin": [23, 26, 41, 42, 43, 44, 68, 71, 88, 89, 90, 91, 101, 106], "mean": [23, 68, 81, 98, 106, 112, 113], "cannot": [23, 68, 106], "underli": [23, 68, 101, 106, 113], "dataevalu": [23, 26, 28, 29, 33, 34, 57, 68, 71, 73, 74, 78, 79, 80, 81, 95, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113], "howev": [23, 68, 94, 106], "pretrain": [23, 68, 106, 113], "embed": [23, 26, 68, 71, 99, 100, 101, 106, 107, 113], "et": [23, 26, 68, 71, 101, 102, 106, 107], "al": [23, 26, 68, 71, 101, 102, 106, 107], "task": [23, 26, 68, 71, 94, 95, 100, 101, 106, 113], "nearest": [23, 26, 68, 71, 101, 106], "neighbor": [23, 26, 68, 71, 101, 106], "algorithm": [23, 24, 26, 29, 68, 69, 71, 74, 81, 94, 101, 104, 106, 107, 111, 113], "1908": [23, 26, 68, 71, 101, 106], "08619": [23, 26, 68, 71, 101, 106], "k_neighbor": [23, 68, 106], "group": [23, 26, 33, 68, 71, 79, 101, 106, 112], "embedding_model": [23, 24, 26, 68, 69, 71, 101, 106], "pre": [23, 24, 68, 69, 100, 104, 106, 107, 112, 113], "lava": [24, 26, 69, 71, 101], "just": [24, 69, 94, 99, 100, 107, 113], "f": [24, 69, 107, 112], "kang": [24, 69, 107], "zeng": [24, 69, 107], "ko": [24, 69, 107], "jin": [24, 69, 107], "without": [24, 26, 69, 71, 96, 101, 105, 107, 113], "openreview": [24, 69, 107, 114], "net": [24, 69, 107, 113, 114], "forum": [24, 69, 107, 114], "id": [24, 69, 100, 107, 113, 114], "jjup86nbl4q": [24, 69, 107], "modellessmixin": [24, 29, 69, 74, 101, 106, 107, 111], "doesn": [24, 29, 69, 74, 107, 111, 113], "requir": [24, 29, 30, 69, 74, 75, 99, 101, 107, 108, 111, 112, 113], "leav": [25, 70, 108], "cook": [25, 70, 108], "detect": [25, 70, 95, 108], "influenti": [25, 70, 108], "observ": [25, 70, 108], "linear": [25, 70, 108], "regress": [25, 40, 70, 81, 87, 100, 102, 108, 113], "technometr": [25, 70, 108], "vol": [25, 29, 70, 74, 104, 108, 111, 113], "19": [25, 70, 108], "No": [25, 70, 108], "feb": [25, 70, 108], "1977": [25, 70, 108], "pp": [25, 29, 70, 74, 104, 108, 111, 113], "15": [25, 70, 108], "18": [25, 70, 108], "page": [25, 70, 108], "predictiong": [26, 71, 101], "been": [26, 71, 94, 99, 101, 108, 113], "ruoxi": [26, 71, 101], "unus": [26, 71, 101, 109, 111], "seri": [26, 71, 101], "algorithim": [26, 71, 94, 101], "against": [26, 71, 101], "complet": [28, 73, 110, 112], "baselin": [28, 73, 110], "comparison": [28, 73, 110], "purpos": [28, 73, 96, 110], "gener": [28, 73, 92, 98, 99, 100, 110, 113], "uniform": [28, 73, 105, 108, 110], "volum": [29, 74, 101], "while": [29, 74, 111], "non": [29, 74, 111, 112, 113], "instead": [29, 39, 74, 86, 107, 111, 112, 113], "fix": [29, 74, 111], "taken": [29, 74, 107, 111], "closer": [29, 74, 111], "here": [29, 74, 95, 104, 105, 111, 113], "github": [29, 74, 94, 105, 106, 107, 111], "com": [29, 74, 100, 105, 106, 107, 111], "zhaoxuanwu": [29, 74, 111], "volumebas": [29, 74, 111], "datavalu": [29, 74, 111], "tree": [29, 74, 100, 111], "main": [29, 74, 104, 105, 107, 111], "xu": [29, 74, 103, 111], "z": [29, 74, 111], "wu": [29, 74, 111], "foo": [29, 74, 111], "b": [29, 74, 98, 107, 111], "kian": [29, 74, 111], "free": [29, 74, 96, 111], "replic": [29, 74, 98, 111], "advanc": [29, 74, 111], "inform": [29, 74, 104, 111, 114], "process": [29, 74, 104, 111, 114], "system": [29, 74, 94, 111, 114], "34": [29, 74, 111], "10837": [29, 74, 111], "10848": [29, 74, 111], "dec": [29, 74, 111], "trade": [29, 74, 111], "off": [29, 74, 111], "more": [29, 74, 99, 111, 113], "refin": [29, 74, 111], "represent": [29, 74, 104, 111], "divers": [29, 74, 94, 111], "greater": [29, 74, 99, 111, 112], "omega": [29, 74, 111], "width": [29, 74, 111], "discret": [29, 74, 111], "coeffici": [29, 74, 102, 107, 111], "d": [29, 74, 100, 107, 111, 112], "cube": [29, 74, 111], "typic": [30, 39, 75, 86, 108, 113], "veri": [30, 75, 108], "computation": [30, 75, 108], "expens": [30, 75, 108], "blue": [30, 75, 108], "print": [30, 75, 108], "wai": [30, 75, 98, 101, 108], "margcontrib": [31, 76, 101], "py": [31, 76, 100, 105, 106, 108, 112], "additon": [31, 76, 108], "constructor": [31, 39, 76, 86, 108, 113], "tmcshaplei": [32, 77, 108], "mc_epoch": [32, 77, 108], "train_kwarg": [33, 79, 112], "metric_nam": [33, 79, 112], "callabl": [33, 79, 98, 99, 100, 101, 107, 108, 112, 113], "output_dir": [33, 79, 112], "raises_error": [33, 79, 112], "timedelta": [33, 79, 112], "exper_func": [33, 79, 112], "noisi": [33, 79, 95, 99, 112], "perform": [33, 34, 79, 80, 94, 98, 101, 102, 104, 105, 108, 112, 113], "union": [33, 79, 99, 112, 113], "pathlib": [33, 79, 112], "output": [33, 79, 92, 95, 98, 112, 113], "rais": [33, 79, 112], "except": [33, 39, 79, 86, 112, 113], "fail": [33, 79, 112], "otherwis": [33, 79, 96, 106, 107, 108, 112], "warn": [33, 79, 112], "continu": [33, 79, 112], "By": [33, 79, 112], "plot": [34, 80, 112], "base_model": [35, 36, 40, 82, 83, 87, 113], "num_class": [35, 36, 82, 83, 113], "wrapper": [35, 36, 40, 82, 83, 87, 98, 99, 101], "sk": [35, 36, 40, 82, 83, 87, 113], "classifi": [35, 36, 41, 82, 83, 88, 95, 100, 112, 113], "linearregress": [35, 40, 82, 87, 113], "basemodel": [35, 36, 40, 82, 83, 87, 113], "support": [35, 36, 40, 82, 83, 87, 113], "sample_weight": [35, 36, 40, 82, 83, 87, 113], "dimension": [35, 36, 82, 83, 104, 112, 113], "don": [36, 83, 113], "classifiersklearnwrapp": [36, 83, 113], "kneighborsclassifi": [36, 83, 113], "some": [37, 39, 84, 86, 113], "higher": [37, 84, 112, 113], "hessian": [37, 84, 113], "templat": [38, 85, 113], "model_nam": [39, 86, 112, 113], "factori": [39, 86, 113], "preset": [39, 86, 112, 113], "mode": [39, 86, 113], "recommend": [39, 86, 108, 113], "import": [39, 86, 94, 95, 99, 104, 113], "addit": [39, 86, 99, 104, 112, 113], "reli": [39, 86, 113], "besid": [39, 86, 113], "do": [39, 86, 96, 113], "match": [39, 86, 106, 113], "intern": [41, 42, 43, 44, 88, 89, 90, 91, 100], "both": [41, 42, 43, 44, 88, 89, 90, 91], "nn": [41, 42, 43, 44, 88, 89, 90, 91, 112, 113], "scriptmodul": [41, 42, 43, 44, 88, 89, 90, 91], "regressor": [44, 91, 113], "3": [45, 94, 104, 107, 108], "version": [45, 94, 100, 107, 112, 113], "releas": [45, 94], "new": [46, 98, 99], "To": [46, 99], "Then": [46, 99, 103], "u": [46, 99, 100], "flexibl": [46, 99], "call": [46, 99, 100], "later": [46, 99], "quantifi": [57, 94, 98, 101], "abc": [57, 81, 101, 108, 113], "inherit": [57, 98, 101], "flow": [57, 101, 107], "run": [78, 95, 98, 112], "experimentmedi": [78, 92, 98, 112], "exist": [81, 99, 113], "compat": [81, 113], "newcommand": [81, 113], "rule": [81, 113], "0pt": [81, 113], "1em": [81, 113], "3em": [81, 113], "begin": [81, 95, 113], "llll": [81, 113], "hline": [81, 113], "textbf": [81, 113], "mbox": [81, 113], "logist": [81, 113], "ye": [81, 113], "optim": [81, 107, 112, 113], "adam": [81, 113], "loss": [81, 104, 107, 113], "cross": [81, 113], "entropi": [81, 107, 113], "mlp": [81, 98, 104], "classif": [81, 100, 103, 113], "bert": [81, 98, 99, 100, 104], "001": [81, 113], "adamw": [81, 113], "lenet": [81, 98], "squar": [81, 107, 113], "end": [81, 113], "datafram": [92, 98, 99, 112], "csv": [92, 95, 98, 99], "recreat": [93, 98], "result": [93, 98, 100, 112], "link": [94, 107], "instal": 94, "repositori": [94, 100, 107], "issu": [94, 107], "tracker": 94, "open": 94, "imag": [94, 100, 104, 113], "tabular": [94, 104], "few": [94, 113], "line": 94, "code": 94, "assess": 94, "qualiti": 94, "impact": 94, "individu": 94, "critic": 94, "improv": 94, "mitig": 94, "undesir": 94, "bias": [94, 104], "propos": 94, "lack": 94, "standard": [94, 98, 99], "benchmark": 94, "paper": [94, 100, 107, 112, 114], "introduc": [94, 104], "easi": 94, "empow": 94, "research": 94, "practition": 94, "variou": [94, 107], "integr": 94, "environ": 94, "collect": [94, 109], "natur": 94, "languag": [94, 100, 113], "ii": [94, 104], "eleven": 94, "differ": [94, 99, 102, 104, 105, 107, 108, 112], "art": 94, "iii": 94, "scikit": 94, "furthermor": 94, "four": 94, "downstream": [94, 100], "analysi": [94, 100, 113], "efficaci": 94, "approach": [94, 108], "singl": 94, "uniformli": 94, "best": 94, "appropri": [94, 104], "emploi": 94, "publicli": 94, "io": 94, "comprehens": 94, "leaderboard": 94, "own": [94, 98, 100, 113], "upload": 95, "challeng": [95, 99], "your": [95, 98, 100, 113], "receiv": 95, "abov": [95, 96, 112], "googl": [95, 100], "form": [95, 105, 111], "appear": 95, "prefix": 95, "submit": 95, "save_datav": [95, 112], "dataload": [95, 98, 112], "iri": [95, 99, 100], "f1": [95, 112], "score": [95, 112], "identifi": [95, 98, 112], "2mean": 95, "mit": [96, 100], "copyright": 96, "kevin": [96, 114], "jiang": [96, 114], "weixin": [96, 114], "jame": [96, 114], "yongchan": [96, 114], "permiss": 96, "herebi": 96, "grant": 96, "charg": 96, "person": 96, "obtain": 96, "copi": [96, 113], "softwar": 96, "associ": [96, 100, 112, 113], "document": [96, 100, 113], "deal": 96, "restrict": 96, "limit": 96, "right": 96, "modifi": [96, 104], "merg": 96, "publish": 96, "sublicens": 96, "sell": 96, "permit": 96, "whom": 96, "furnish": 96, "subject": 96, "condit": [96, 113], "notic": 96, "shall": 96, "substanti": 96, "portion": 96, "THE": 96, "AS": 96, "warranti": 96, "OF": 96, "kind": 96, "express": 96, "OR": 96, "impli": 96, "BUT": 96, "NOT": 96, "TO": 96, "merchant": 96, "FOR": 96, "particular": 96, "AND": 96, "noninfring": 96, "IN": 96, "NO": 96, "event": 96, "author": [96, 114], "holder": 96, "BE": 96, "liabl": 96, "claim": 96, "damag": 96, "liabil": 96, "action": 96, "contract": 96, "tort": 96, "aris": [96, 101], "connect": 96, "WITH": 96, "packag": 97, "subpackag": 97, "submodul": 97, "util": [97, 108], "content": 97, "noisifi": 98, "datav": 98, "logistic_regress": 98, "qualnam": [98, 99], "start": [98, 99, 109], "boundari": [98, 99], "funcenum": [98, 99], "neg_l2": 98, "neg_ms": 98, "two": [98, 104, 107], "strenum": 98, "enum": 98, "string": [98, 100, 112], "static": [98, 99], "func": [98, 99, 100, 108, 112], "seen": 98, "convers": 98, "meanstdtim": 98, "elapsed_tim": 98, "format": 98, "paramsweep": 98, "sweep": 98, "kwargs_list": 98, "reprmixin": [98, 101, 108], "repr": 98, "python3": 98, "get_nam": 98, "load_mediator_output": 98, "set_random_st": 98, "worth": 98, "easili": 98, "extend": 98, "determin": [98, 101, 107, 112], "imageset": 99, "nlpset": 99, "properti": [99, 101, 113], "datasets_avail": 99, "export_dataset": 99, "covariates_nam": 99, "labels_nam": 99, "output_directori": [99, 112], "posixpath": 99, "home": 99, "runner": 99, "doc": 99, "classmethod": [99, 112], "from_data": 99, "therefor": 99, "alreadi": [99, 104, 108], "flag": 99, "map": 99, "from_data_split": 99, "x_test": [99, 112], "y_test": [99, 112], "add_nois": [99, 112], "self": [99, 100, 101, 103, 108, 111, 112, 113], "noise_arg": 99, "noise_kwarg": [99, 112], "signifi": 99, "chang": [99, 100, 112, 113], "made": [99, 112, 113], "those": [99, 102, 112], "setup": [99, 101], "train_count": [99, 112], "valid_count": [99, 112], "test_count": [99, 112], "split_dataset_by_count": 99, "count": [99, 111], "invalid": 99, "either": [99, 100, 101], "split_dataset_by_indic": 99, "train_indic": 99, "sequenc": [99, 100, 112, 113], "valid_indic": 99, "test_indic": 99, "leak": 99, "least": [99, 108, 112], "split_dataset_by_prop": 99, "train_prop": 99, "valid_prop": 99, "test_prop": 99, "noisefunc": 99, "add_gauss_nois": 99, "mix_label": [99, 112], "mu": 99, "sigma": 99, "gaussian": [99, 100, 107], "center": 99, "deviat": 99, "data_fil": 99, "classvar": [99, 101, 108, 113], "2dplane": [99, 100], "miniboon": [99, 100], "adult": [99, 100], "bbc": [99, 100], "breast_canc": [99, 100], "cifar10": [99, 100], "cifar100": [99, 100], "creditcard": [99, 100], "diabet": [99, 100], "digit": [99, 100, 113], "echomonth": [99, 100], "elect": [99, 100], "electr": [99, 100], "fashion": [99, 100], "fri": [99, 100], "gaussian_classifi": [99, 100], "gaussian_classifier_high_dim": 99, "imdb": [99, 100], "linnerud": [99, 100], "lowbwt": [99, 100], "mnist": [99, 100], "mv": [99, 100], "nomao": [99, 100], "pol": [99, 100], "stl10": [99, 100], "stock": [99, 100], "svhn": [99, 100], "wave_energi": [99, 100], "add_covar_transform": 99, "add_label_transform": 99, "from_covar_func": 99, "from_covar_label_func": 99, "from_csv": 99, "label_column": 99, "from_label_func": 99, "from_numpi": 99, "from_panda": 99, "df": [99, 112], "frame": 99, "load_data": 99, "one_hot_encod": 99, "catdataset": 99, "folderdataset": 99, "folder_path": 99, "folder": 99, "batch_cach": 99, "format_batch_path": 99, "batch_index": 99, "get_batch": 99, "metadata": 99, "pkl": 99, "gradientdataset": 99, "disk": 99, "write": 99, "batch_numb": 99, "indextransformdataset": 99, "t_co": 99, "index_transform": 99, "primarili": 99, "__getitem__": 99, "well": [99, 113], "listdataset": 99, "input_list": 99, "want": 99, "back": 99, "around": 99, "intend": [99, 107], "axi": [99, 112], "variabl": [99, 104], "token": [99, 113], "onli": [99, 103, 107, 112, 113], "load_tensor": 99, "tensor_path": 99, "challenge_url": 100, "yongchanstat": 100, "backend": 100, "drive": 100, "basenam": 100, "download_dr": 100, "drive_id": 100, "retri": 100, "attempt": 100, "iris_challeng": 100, "download_2dplan": 100, "download_miniboon": 100, "download_adult": 100, "binari": [100, 112], "categori": 100, "incom": 100, "dvrl": [100, 101], "kohavi": 100, "scale": [100, 113], "naiv": [100, 104], "bay": 100, "decis": 100, "hybrid": 100, "proceed": [100, 113], "second": [100, 107, 112], "confer": [100, 114], "knowledg": 100, "discoveri": [100, 112], "mine": 100, "1996": 100, "sercan": [100, 104], "o": [100, 104, 112], "download_breast_canc": 100, "download_creditcard": 100, "download_diabet": 100, "download_digit": 100, "download_echomonth": 100, "download_elect": 100, "presidenti": 100, "scienc": 100, "lab": 100, "e": [100, 104, 107], "presid": 100, "1976": 100, "harvard": 100, "datavers": 100, "doi": [100, 104, 113], "7910": 100, "dvn": 100, "42mvdx": 100, "download_electr": 100, "download_fri": 100, "download_iri": 100, "download_linnerud": 100, "download_lowbwt": 100, "download_mv": 100, "download_nomao": 100, "download_pol": 100, "download_stock": 100, "download_wave_energi": 100, "10000": 100, "input_dim": [100, 113], "artifici": 100, "load_openml": 100, "data_id": 100, "is_classif": 100, "openml": 100, "help": [100, 113], "resnetembed": 100, "dataset_class": 100, "visiondataset": 100, "224": 100, "128": 100, "convert": [100, 113], "pil": 100, "color": [100, 113], "resnet50": 100, "done": 100, "vector": [100, 107], "extract": [100, 104, 112], "avgpool": 100, "hook": 100, "featur": [100, 107, 111], "k": [100, 112, 113], "he": 100, "ren": 100, "sun": 100, "residu": 100, "recognit": [100, 113], "2016": 100, "ieee": [100, 113], "vision": 100, "pattern": 100, "cvpr": 100, "jun": 100, "1109": [100, 113], "90": 100, "image_set": 100, "resiz": 100, "visionadapt": 100, "adapt": 100, "__call__": 100, "cifar10_emb": 100, "show_imag": 100, "img": 100, "displai": [100, 112], "stl10_emb": 100, "svhn_emb": 100, "bertembed": 100, "text": [100, 104], "pool": 100, "distilbert": [100, 113], "see": [100, 113], "below": [100, 104, 112, 113], "sentenc": [100, 113], "It": [100, 107], "equival": [100, 108], "frozen": 100, "advis": 100, "locat": 100, "faster": [100, 113], "devlin": [100, 113], "lee": [100, 113], "toutanova": [100, 113], "bidirect": [100, 113], "2018": [100, 113], "1810": [100, 113], "04805": [100, 113], "sanh": [100, 113], "l": [100, 113], "debut": [100, 113], "chaumond": [100, 113], "wolf": [100, 113], "distil": [100, 113], "smaller": [100, 113], "cheaper": [100, 113], "lighter": [100, 113], "1910": [100, 113], "01108": [100, 113], "bbc_embed": 100, "download_bbc": 100, "articl": [100, 114], "green": 100, "cunningham": 100, "practic": [100, 108], "solut": [100, 107], "problem": [100, 107, 113], "diagon": 100, "domin": 100, "kernel": [100, 107, 113], "cluster": [100, 112], "proc": 100, "icml": 100, "2006": 100, "download_imdb": 100, "sentiment": 100, "review": 100, "neg": 100, "maa": 100, "dali": 100, "pham": 100, "huang": 100, "ng": 100, "pott": 100, "49th": 100, "annual": 100, "meet": 100, "linguist": 100, "2011": 100, "imdb_embed": 100, "am": 101, "csshap": 101, "infsub": 101, "knnshap": 101, "otdd": 101, "betashap": 101, "datashap": 101, "loo": 101, "shap": 101, "rv": 101, "baggingevalu": [101, 102], "betashaplei": [101, 108], "classwiseshaplei": [101, 103], "databanzhaf": [101, 108], "databanzhafmargcontrib": [101, 108], "dataoob": [101, 109], "datashaplei": [101, 108], "influencefunct": [101, 105], "influencesubsampl": [101, 105], "knnshaplei": [101, 106], "lavaevalu": [101, 107], "leaveoneout": [101, 108], "randomevalu": [101, 110], "robustvolumeshaplei": [101, 111], "shapevalu": [101, 108], "store": [101, 102, 103, 104, 105, 107, 108, 109, 111, 113], "held": [101, 102, 103, 104, 105, 108, 109, 111], "input_fetch": 101, "altern": [101, 112], "contain": [101, 112, 113], "assign": [101, 104], "mse": [101, 113], "acc": 101, "under": 101, "tuppl": 101, "equal": [101, 112], "modelmixin": [101, 102, 103, 104, 105, 108, 109], "y_hat": [101, 104], "between": [101, 104, 105, 107], "move": [101, 113], "becaus": [101, 112, 113], "bug": [101, 107], "input_metr": 101, "input_model": [101, 105], "input_model_metr": 101, "lasso": 102, "accord": [102, 108], "everi": [102, 105, 108, 109], "bernouli": 102, "bernoulli": [102, 104], "get_subset_perf": 102, "wise": [103, 107], "note": [103, 105, 107, 112, 113], "schoch": 103, "ji": 103, "2211": 103, "06800": 103, "explicitli": 103, "tmcsampler": [103, 108], "remov": [103, 112], "return": [103, 110], "contrib": [103, 108], "final": 103, "record": [103, 109], "num_work": 104, "probabl": [104, 107, 113], "signal": 104, "worker": 104, "x_dim": 104, "y_dim": 104, "assum": 104, "multi": [104, 113], "architectur": 104, "relev": 104, "high": [104, 112], "induct": 104, "case": 104, "g": [104, 107, 112], "last": [104, 107, 113], "activ": [104, 113], "resnet": 104, "top": 104, "simpli": 104, "come": 104, "predictor": 104, "entir": 104, "definit": 104, "bia": 104, "convolut": [104, 113], "attent": [104, 113], "flatten": 104, "dveloss": 104, "exploration_weight": 104, "custom": 104, "bce": 104, "explor": [104, 112], "larg": 104, "constant": 104, "1e3": 104, "pred_datav": 104, "selector_input": 104, "reward_input": 104, "multipli": [104, 108], "reward": 104, "william": 104, "connectionist": 104, "8": 104, "229": 104, "256": [104, 107], "1992": 104, "1007": 104, "bf00992696": 104, "better": 104, "full": [104, 107], "gradientmodel": [105, 113], "inspir": [105, 112], "valda": 105, "uvanlp": 105, "blob": [105, 106], "src": 105, "inf_func": 105, "minu": [105, 108], "similar": [105, 107], "math": 105, "likewis": 105, "previous": 105, "influencefunctionev": 105, "demo": 105, "docstr": 105, "clarifi": 105, "confus": 105, "row": [106, 112], "ignor": 106, "ai": 106, "secur": 106, "studi": 106, "master": 106, "knn_shaplei": 106, "calibr": 107, "dual": 107, "interpret": 107, "wasserstein": 107, "alvarez": 107, "meli": 107, "fusi": 107, "geometr": 107, "transport": 107, "2002": 107, "02923": 107, "dynam": 107, "2010": 107, "12760": 107, "macos_fix": 107, "geomloss": 107, "maco": 107, "remedi": 107, "nvlab": 107, "stylegan3": 107, "75": 107, "exact": [107, 112], "repo": 107, "strict": 107, "legaci": 107, "notat": 107, "x1": 107, "x2": 107, "y1": 107, "y2": 107, "n1": 107, "n2": 107, "d1": 107, "d2": 107, "c1": 107, "c2": 107, "datasetdist": 107, "feature_cost": 107, "liter": 107, "euclidean": 107, "entreg": 107, "lam_x": 107, "lam_i": 107, "inner_ot_loss": 107, "sinkhorn": 107, "inner_ot_debias": 107, "inner_ot_p": 107, "inner_ot_entreg": 107, "instanti": 107, "target": 107, "cost": 107, "ot": 107, "strength": 107, "regular": 107, "compon": 107, "debias": 107, "inner": 107, "dual_sol": 107, "fulli": 107, "memori": [107, 113], "avoid": 107, "dist": 107, "pi": 107, "coupl": 107, "featurecost": 107, "src_embed": 107, "tgt_embed": 107, "src_dim": 107, "tgt_dim": 107, "batch_augmented_cost": 107, "z1": 107, "z2": 107, "ground": 107, "augment": 107, "dim": [107, 108, 113], "v1": 107, "v2": 107, "precomput": 107, "pairwis": 107, "matrix": [107, 111], "expect": [107, 112], "congruent": 107, "power": 107, "extract_dataset": 107, "x_input": 107, "y_input": 107, "reindex_start": 107, "reindex": 107, "offset": 107, "x_tensor": 107, "stack": [107, 109], "along": 107, "y_tensor": 107, "longer": 107, "pwdist_exact": 107, "symmetr": 107, "cost_funct": 107, "debia": 107, "multipl": 107, "assumpt": 107, "treat": 107, "iif": 107, "diverg": [107, 112], "interpol": 107, "blur": 107, "infti": 107, "tfrac": 107, "1e": 107, "powerset": 108, "previou": 108, "minim": 108, "compute_weight": 108, "combin": 108, "equat": 108, "frac": 108, "tbinom": 108, "propto": 108, "gr_max": 108, "maximum": 108, "burn": 108, "compute_marginal_contribut": 108, "iter": [108, 112, 113], "calcul": 108, "look": [108, 112], "scratch": 108, "marginal_increment_array_stack": 108, "increment": [108, 109], "set_coalit": 108, "coalit": 108, "storag": 108, "montecarlosampl": 108, "mont": 108, "carlo": 108, "permut": 108, "simplest": 108, "structur": 108, "set_evalu": 108, "value_func": 108, "hi": 108, "_evaluate_model": 108, "respect": [108, 111, 112, 113], "semi": 108, "Of": 109, "groupingindex": 109, "defaultdict": 109, "insert": 109, "add_indic": 109, "randomev": 110, "doe": [110, 112, 113], "compute_robust_volum": 111, "x_tild": 111, "hypercub": 111, "compute_x_tilde_and_count": 111, "compress": 111, "dcube": 111, "compute_data_valu": 112, "data_evalu": 112, "save_output": 112, "exper_kwarg": 112, "wether": 112, "eval_kwarg": 112, "pd": 112, "model_factory_setup": 112, "mtrand": 112, "modelfactori": [112, 113], "loader": 112, "model_factori": 112, "ax": 112, "figur": 112, "col": 112, "fig": 112, "matplotlib": 112, "subplot": 112, "num_evalu": 112, "column": 112, "set_output_directori": 112, "init": 112, "discover_corrupted_sampl": 112, "percentil": 112, "low": 112, "repeatedli": 112, "addition": 112, "valuabl": 112, "corrupt_found": 112, "corrupt": 112, "inspect": 112, "until": 112, "exhaust": 112, "were": 112, "randomli": 112, "corrupted_sampl": 112, "increasing_bin_remov": 112, "bin_siz": 112, "principl": 112, "bin": 112, "cutoff": 112, "examin": 112, "consid": 112, "frac_datapoints_explor": 112, "_at_datavalu": 112, "noisy_detect": 112, "abil": 112, "2nn": 112, "kmean": 112, "convex": 112, "highest": 112, "lowest": 112, "belong": [112, 113], "most": 112, "zero": [112, 113], "kmeans_f1": 112, "1d": 112, "lower": 112, "correct": 112, "remove_high_low": 112, "remove_least_influential_first_": 112, "remove_most_influential_first_": 112, "output_path": 112, "f1_score": 112, "actual": 112, "filter_kwarg": 112, "filter": 112, "signatur": 112, "whose": 112, "oned_twonn_clust": 112, "val": 112, "nlog": 112, "sort": 112, "gr\u00f8nlund": 112, "larsen": 112, "mathiasen": 112, "nielsen": 112, "schneider": 112, "song": 112, "fast": 112, "median": 112, "bregman": 112, "1701": 112, "07204": 112, "repres": [112, 113], "dummi": 113, "mlpclassifi": 113, "predict_proba": 113, "classifierunweightedsklearnwrapp": 113, "bertclassifi": 113, "classifiermlp": 113, "logisticregress": 113, "regressionmlp": 113, "regressionsklearnwrapp": 113, "torchclassmixin": 113, "torchgradmixin": 113, "torchmodel": 113, "torchpredictmixin": 113, "torchregressmixin": 113, "clone": 113, "often": 113, "consist": 113, "sklearn": 113, "insuffici": 113, "dummyregressor": 113, "num_sampl": 113, "behavior": 113, "to_numpi": 113, "mini": 113, "pretrained_model_nam": 113, "uncas": 113, "dropout_r": 113, "num_train_lay": 113, "fine": 113, "tune": 113, "meant": 113, "onto": 113, "dropout": 113, "input_id": 113, "attention_mask": 113, "applic": 113, "token_type_id": 113, "fed": 113, "co": 113, "glossari": 113, "attend": 113, "mask": 113, "tensordataset": 113, "reflect": 113, "depth": 113, "return_attention_mask": 113, "model_input_nam": 113, "aren": 113, "return_token_type_id": 113, "x_data": 113, "Will": 113, "lot": 113, "y_data": 113, "gray_scal": 113, "5x5": 113, "earliest": 113, "conceiv": 113, "cnn": 113, "particularli": 113, "lecun": 113, "bottou": 113, "bengio": 113, "haffner": 113, "86": 113, "11": 113, "2278": 113, "2324": 113, "1998": 113, "726791": 113, "grai": 113, "risk": 113, "25": 113, "act_fn": 113, "relu": 113, "jiang2023opendatav": 114, "titl": 114, "fu": 114, "booktitl": 114, "thirti": 114, "seventh": 114, "year": 114, "eek99egxeb": 114}, "objects": {"": [[98, 0, 0, "-", "opendataval"]], "opendataval": [[45, 1, 1, "", "__version__"], [99, 0, 0, "-", "dataloader"], [101, 0, 0, "-", "dataval"], [112, 0, 0, "-", "experiment"], [98, 0, 0, "-", "metrics"], [113, 0, 0, "-", "model"], [98, 0, 0, "-", "util"]], "opendataval.dataloader": [[47, 2, 1, "", "CatDataset"], [48, 2, 1, "", "DataFetcher"], [49, 2, 1, "", "Register"], [50, 4, 1, "", "cache"], [100, 0, 0, "-", "datasets"], [99, 0, 0, "-", "fetcher"], [55, 4, 1, "", "mix_labels"], [99, 0, 0, "-", "noisify"], [56, 4, 1, "", "one_hot_encode"], [99, 0, 0, "-", "register"], [99, 0, 0, "-", "util"]], "opendataval.dataloader.CatDataset": [[47, 3, 1, "", "__init__"]], "opendataval.dataloader.DataFetcher": [[48, 3, 1, "", "__init__"]], "opendataval.dataloader.Register": [[49, 3, 1, "", "__init__"]], "opendataval.dataloader.datasets": [[100, 0, 0, "-", "challenge"], [100, 0, 0, "-", "datasets"], [100, 0, 0, "-", "imagesets"], [100, 0, 0, "-", "nlpsets"]], "opendataval.dataloader.datasets.challenge": [[100, 1, 1, "", "CHALLENGE_URL"], [100, 4, 1, "", "basename"], [100, 4, 1, "", "download_drive"], [100, 4, 1, "", "iris_challenge"]], "opendataval.dataloader.datasets.datasets": [[100, 4, 1, "", "download_2dplanes"], [100, 4, 1, "", "download_MiniBooNE"], [100, 4, 1, "", "download_adult"], [100, 4, 1, "", "download_breast_cancer"], [100, 4, 1, "", "download_creditcard"], [100, 4, 1, "", "download_diabetes"], [100, 4, 1, "", "download_digits"], [100, 4, 1, "", "download_echoMonths"], [100, 4, 1, "", "download_election"], [100, 4, 1, "", "download_electricity"], [100, 4, 1, "", "download_fried"], [100, 4, 1, "", "download_iris"], [100, 4, 1, "", "download_linnerud"], [100, 4, 1, "", "download_lowbwt"], [100, 4, 1, "", "download_mv"], [100, 4, 1, "", "download_nomao"], [100, 4, 1, "", "download_pol"], [100, 4, 1, "", "download_stock"], [100, 4, 1, "", "download_wave_energy"], [100, 4, 1, "", "gaussian_classifier"], [100, 4, 1, "", "load_openml"]], "opendataval.dataloader.datasets.imagesets": [[100, 4, 1, "", "ResnetEmbeding"], [100, 2, 1, "", "VisionAdapter"], [100, 1, 1, "", "cifar10"], [100, 1, 1, "", "cifar100"], [100, 4, 1, "", "cifar10_embed"], [100, 1, 1, "", "fashion"], [100, 1, 1, "", "numbers"], [100, 4, 1, "", "show_image"], [100, 4, 1, "", "stl10_embed"], [100, 4, 1, "", "svhn_embed"]], "opendataval.dataloader.datasets.nlpsets": [[100, 4, 1, "", "BertEmbeddings"], [100, 4, 1, "", "bbc_embedding"], [100, 4, 1, "", "download_bbc"], [100, 4, 1, "", "download_imdb"], [100, 4, 1, "", "imdb_embedding"]], "opendataval.dataloader.fetcher": [[99, 2, 1, "", "DataFetcher"]], "opendataval.dataloader.fetcher.DataFetcher": [[99, 5, 1, "", "covar_dim"], [99, 5, 1, "", "datapoints"], [99, 3, 1, "", "datasets_available"], [99, 3, 1, "", "export_dataset"], [99, 3, 1, "", "from_data"], [99, 3, 1, "", "from_data_splits"], [99, 5, 1, "", "label_dim"], [99, 3, 1, "", "noisify"], [99, 5, 1, "", "num_points"], [99, 3, 1, "", "setup"], [99, 3, 1, "", "split_dataset_by_count"], [99, 3, 1, "", "split_dataset_by_indices"], [99, 3, 1, "", "split_dataset_by_prop"]], "opendataval.dataloader.noisify": [[99, 2, 1, "", "NoiseFunc"], [99, 4, 1, "", "add_gauss_noise"], [99, 4, 1, "", "mix_labels"]], "opendataval.dataloader.noisify.NoiseFunc": [[99, 6, 1, "", "ADD_GAUSS_NOISE"], [99, 6, 1, "", "MIX_LABELS"]], "opendataval.dataloader.register": [[99, 2, 1, "", "Register"], [99, 4, 1, "", "cache"], [99, 4, 1, "", "one_hot_encode"]], "opendataval.dataloader.register.Register": [[99, 6, 1, "", "CACHE_DIR"], [99, 6, 1, "", "Datasets"], [99, 3, 1, "", "add_covar_transform"], [99, 3, 1, "", "add_label_transform"], [99, 3, 1, "", "from_covar_func"], [99, 3, 1, "", "from_covar_label_func"], [99, 3, 1, "", "from_csv"], [99, 3, 1, "", "from_data"], [99, 3, 1, "", "from_label_func"], [99, 3, 1, "", "from_numpy"], [99, 3, 1, "", "from_pandas"], [99, 3, 1, "", "load_data"]], "opendataval.dataloader.util": [[99, 2, 1, "", "CatDataset"], [99, 2, 1, "", "FolderDataset"], [99, 2, 1, "", "IndexTransformDataset"], [99, 2, 1, "", "ListDataset"], [99, 4, 1, "", "load_tensor"]], "opendataval.dataloader.util.FolderDataset": [[99, 6, 1, "", "BATCH_CACHE"], [99, 3, 1, "", "exists"], [99, 3, 1, "", "format_batch_path"], [99, 3, 1, "", "get_batch"], [99, 3, 1, "", "load"], [99, 5, 1, "", "metadata"], [99, 3, 1, "", "save"], [99, 5, 1, "", "shape"], [99, 3, 1, "", "write"]], "opendataval.dataloader.util.IndexTransformDataset": [[99, 5, 1, "", "transform"]], "opendataval.dataval": [[58, 2, 1, "", "AME"], [59, 2, 1, "", "BetaShapley"], [60, 2, 1, "", "DVRL"], [61, 2, 1, "", "DataBanzhaf"], [62, 2, 1, "", "DataEvaluator"], [63, 2, 1, "", "DataOob"], [64, 2, 1, "", "DataShapley"], [65, 2, 1, "", "GrTMCSampler"], [66, 2, 1, "", "InfluenceFunction"], [67, 2, 1, "", "InfluenceSubsample"], [68, 2, 1, "", "KNNShapley"], [69, 2, 1, "", "LavaEvaluator"], [70, 2, 1, "", "LeaveOneOut"], [71, 2, 1, "", "ModelLessMixin"], [72, 2, 1, "", "ModelMixin"], [73, 2, 1, "", "RandomEvaluator"], [74, 2, 1, "", "RobustVolumeShapley"], [75, 2, 1, "", "Sampler"], [76, 2, 1, "", "ShapEvaluator"], [77, 2, 1, "", "TMCSampler"], [102, 0, 0, "-", "ame"], [101, 0, 0, "-", "api"], [103, 0, 0, "-", "csshap"], [104, 0, 0, "-", "dvrl"], [105, 0, 0, "-", "influence"], [106, 0, 0, "-", "knnshap"], [107, 0, 0, "-", "lava"], [108, 0, 0, "-", "margcontrib"], [109, 0, 0, "-", "oob"], [110, 0, 0, "-", "random"], [111, 0, 0, "-", "volume"]], "opendataval.dataval.AME": [[58, 3, 1, "", "__init__"]], "opendataval.dataval.BetaShapley": [[59, 3, 1, "", "__init__"]], "opendataval.dataval.DVRL": [[60, 3, 1, "", "__init__"]], "opendataval.dataval.DataBanzhaf": [[61, 3, 1, "", "__init__"]], "opendataval.dataval.DataEvaluator": [[62, 3, 1, "", "__init__"]], "opendataval.dataval.DataOob": [[63, 3, 1, "", "__init__"]], "opendataval.dataval.DataShapley": [[64, 3, 1, "", "__init__"]], "opendataval.dataval.GrTMCSampler": [[65, 3, 1, "", "__init__"]], "opendataval.dataval.InfluenceFunction": [[66, 3, 1, "", "__init__"]], "opendataval.dataval.InfluenceSubsample": [[67, 3, 1, "", "__init__"]], "opendataval.dataval.KNNShapley": [[68, 3, 1, "", "__init__"]], "opendataval.dataval.LavaEvaluator": [[69, 3, 1, "", "__init__"]], "opendataval.dataval.LeaveOneOut": [[70, 3, 1, "", "__init__"]], "opendataval.dataval.ModelLessMixin": [[71, 3, 1, "", "__init__"]], "opendataval.dataval.ModelMixin": [[72, 3, 1, "", "__init__"]], "opendataval.dataval.RandomEvaluator": [[73, 3, 1, "", "__init__"]], "opendataval.dataval.RobustVolumeShapley": [[74, 3, 1, "", "__init__"]], "opendataval.dataval.Sampler": [[75, 3, 1, "", "__init__"]], "opendataval.dataval.ShapEvaluator": [[76, 3, 1, "", "__init__"]], "opendataval.dataval.TMCSampler": [[77, 3, 1, "", "__init__"]], "opendataval.dataval.ame": [[102, 0, 0, "-", "ame"]], "opendataval.dataval.ame.ame": [[102, 2, 1, "", "AME"], [102, 2, 1, "", "BaggingEvaluator"]], "opendataval.dataval.ame.ame.AME": [[102, 3, 1, "", "evaluate_data_values"], [102, 3, 1, "", "train_data_values"]], "opendataval.dataval.ame.ame.BaggingEvaluator": [[102, 3, 1, "", "evaluate_data_values"], [102, 3, 1, "", "get_subset_perf"], [102, 3, 1, "", "input_data"], [102, 3, 1, "", "train_data_values"]], "opendataval.dataval.api": [[101, 2, 1, "", "DataEvaluator"], [101, 2, 1, "", "ModelLessMixin"], [101, 2, 1, "", "ModelMixin"]], "opendataval.dataval.api.DataEvaluator": [[101, 6, 1, "", "Evaluators"], [101, 5, 1, "", "data_values"], [101, 3, 1, "", "evaluate_data_values"], [101, 3, 1, "", "input_data"], [101, 3, 1, "", "input_fetcher"], [101, 3, 1, "", "setup"], [101, 3, 1, "", "train"], [101, 3, 1, "", "train_data_values"]], "opendataval.dataval.api.ModelLessMixin": [[101, 3, 1, "", "embeddings"]], "opendataval.dataval.api.ModelMixin": [[101, 3, 1, "", "evaluate"], [101, 3, 1, "", "input_metric"], [101, 3, 1, "", "input_model"], [101, 3, 1, "", "input_model_metric"]], "opendataval.dataval.csshap": [[103, 0, 0, "-", "csshap"]], "opendataval.dataval.csshap.csshap": [[103, 2, 1, "", "ClassWiseShapley"]], "opendataval.dataval.csshap.csshap.ClassWiseShapley": [[103, 3, 1, "", "evaluate_data_values"], [103, 3, 1, "", "input_data"], [103, 3, 1, "", "train_data_values"]], "opendataval.dataval.dvrl": [[104, 0, 0, "-", "dvrl"]], "opendataval.dataval.dvrl.dvrl": [[104, 2, 1, "", "DVRL"], [104, 2, 1, "", "DataValueEstimatorRL"], [104, 2, 1, "", "DveLoss"]], "opendataval.dataval.dvrl.dvrl.DVRL": [[104, 3, 1, "", "evaluate_data_values"], [104, 3, 1, "", "input_data"], [104, 3, 1, "", "train_data_values"]], "opendataval.dataval.dvrl.dvrl.DataValueEstimatorRL": [[104, 3, 1, "", "forward"]], "opendataval.dataval.dvrl.dvrl.DveLoss": [[104, 3, 1, "", "forward"]], "opendataval.dataval.influence": [[105, 0, 0, "-", "influence"], [105, 0, 0, "-", "infsub"]], "opendataval.dataval.influence.influence": [[105, 2, 1, "", "InfluenceFunction"]], "opendataval.dataval.influence.influence.InfluenceFunction": [[105, 3, 1, "", "evaluate_data_values"], [105, 3, 1, "", "input_data"], [105, 3, 1, "", "input_model"], [105, 3, 1, "", "train_data_values"]], "opendataval.dataval.influence.infsub": [[105, 2, 1, "", "InfluenceSubsample"]], "opendataval.dataval.influence.infsub.InfluenceSubsample": [[105, 3, 1, "", "evaluate_data_values"], [105, 3, 1, "", "input_data"], [105, 3, 1, "", "train_data_values"]], "opendataval.dataval.knnshap": [[106, 0, 0, "-", "knnshap"]], "opendataval.dataval.knnshap.knnshap": [[106, 2, 1, "", "KNNShapley"]], "opendataval.dataval.knnshap.knnshap.KNNShapley": [[106, 3, 1, "", "evaluate_data_values"], [106, 3, 1, "", "match"], [106, 3, 1, "", "train_data_values"]], "opendataval.dataval.lava": [[107, 0, 0, "-", "lava"], [107, 0, 0, "-", "otdd"]], "opendataval.dataval.lava.lava": [[107, 2, 1, "", "LavaEvaluator"], [107, 4, 1, "", "macos_fix"]], "opendataval.dataval.lava.lava.LavaEvaluator": [[107, 3, 1, "", "evaluate_data_values"], [107, 3, 1, "", "train_data_values"]], "opendataval.dataval.lava.otdd": [[107, 2, 1, "", "DatasetDistance"], [107, 2, 1, "", "FeatureCost"], [107, 4, 1, "", "batch_augmented_cost"], [107, 4, 1, "", "extract_dataset"], [107, 4, 1, "", "pwdist_exact"]], "opendataval.dataval.lava.otdd.DatasetDistance": [[107, 3, 1, "", "dual_sol"]], "opendataval.dataval.margcontrib": [[108, 0, 0, "-", "banzhaf"], [108, 0, 0, "-", "betashap"], [108, 0, 0, "-", "datashap"], [108, 0, 0, "-", "loo"], [108, 0, 0, "-", "sampler"], [108, 0, 0, "-", "shap"]], "opendataval.dataval.margcontrib.banzhaf": [[108, 2, 1, "", "DataBanzhaf"], [108, 2, 1, "", "DataBanzhafMargContrib"]], "opendataval.dataval.margcontrib.banzhaf.DataBanzhaf": [[108, 3, 1, "", "evaluate_data_values"], [108, 3, 1, "", "input_data"], [108, 3, 1, "", "train_data_values"]], "opendataval.dataval.margcontrib.banzhaf.DataBanzhafMargContrib": [[108, 3, 1, "", "compute_weight"]], "opendataval.dataval.margcontrib.betashap": [[108, 2, 1, "", "BetaShapley"]], "opendataval.dataval.margcontrib.betashap.BetaShapley": [[108, 3, 1, "", "compute_weight"]], "opendataval.dataval.margcontrib.datashap": [[108, 2, 1, "", "DataShapley"]], "opendataval.dataval.margcontrib.datashap.DataShapley": [[108, 3, 1, "", "compute_weight"]], "opendataval.dataval.margcontrib.loo": [[108, 2, 1, "", "LeaveOneOut"]], "opendataval.dataval.margcontrib.loo.LeaveOneOut": [[108, 3, 1, "", "evaluate_data_values"], [108, 3, 1, "", "input_data"], [108, 3, 1, "", "train_data_values"]], "opendataval.dataval.margcontrib.sampler": [[108, 2, 1, "", "GrTMCSampler"], [108, 2, 1, "", "MonteCarloSampler"], [108, 2, 1, "", "Sampler"], [108, 2, 1, "", "TMCSampler"]], "opendataval.dataval.margcontrib.sampler.GrTMCSampler": [[108, 6, 1, "", "CACHE"], [108, 6, 1, "", "GR_MAX"], [108, 3, 1, "", "compute_marginal_contribution"], [108, 3, 1, "", "set_coalition"]], "opendataval.dataval.margcontrib.sampler.MonteCarloSampler": [[108, 6, 1, "", "CACHE"], [108, 3, 1, "", "compute_marginal_contribution"], [108, 3, 1, "", "set_coalition"]], "opendataval.dataval.margcontrib.sampler.Sampler": [[108, 3, 1, "", "compute_marginal_contribution"], [108, 3, 1, "", "set_coalition"], [108, 3, 1, "", "set_evaluator"]], "opendataval.dataval.margcontrib.sampler.TMCSampler": [[108, 6, 1, "", "CACHE"], [108, 3, 1, "", "compute_marginal_contribution"], [108, 3, 1, "", "set_coalition"]], "opendataval.dataval.margcontrib.shap": [[108, 2, 1, "", "ShapEvaluator"]], "opendataval.dataval.margcontrib.shap.ShapEvaluator": [[108, 3, 1, "", "compute_weight"], [108, 3, 1, "", "evaluate_data_values"], [108, 3, 1, "", "input_data"], [108, 3, 1, "", "train_data_values"]], "opendataval.dataval.oob": [[109, 0, 0, "-", "oob"]], "opendataval.dataval.oob.oob": [[109, 2, 1, "", "DataOob"], [109, 2, 1, "", "GroupingIndex"]], "opendataval.dataval.oob.oob.DataOob": [[109, 3, 1, "", "evaluate_data_values"], [109, 3, 1, "", "input_data"], [109, 3, 1, "", "train_data_values"]], "opendataval.dataval.oob.oob.GroupingIndex": [[109, 3, 1, "", "add_indices"]], "opendataval.dataval.random": [[110, 0, 0, "-", "random"]], "opendataval.dataval.random.random": [[110, 2, 1, "", "RandomEvaluator"]], "opendataval.dataval.random.random.RandomEvaluator": [[110, 3, 1, "", "evaluate_data_values"], [110, 3, 1, "", "train_data_values"]], "opendataval.dataval.volume": [[111, 0, 0, "-", "rvs"]], "opendataval.dataval.volume.rvs": [[111, 2, 1, "", "RobustVolumeShapley"], [111, 4, 1, "", "compute_robust_volumes"], [111, 4, 1, "", "compute_x_tilde_and_counts"]], "opendataval.dataval.volume.rvs.RobustVolumeShapley": [[111, 3, 1, "", "evaluate_data_values"], [111, 3, 1, "", "input_data"], [111, 3, 1, "", "train_data_values"]], "opendataval.experiment": [[79, 2, 1, "", "ExperimentMediator"], [112, 0, 0, "-", "api"], [112, 0, 0, "-", "exper_methods"], [112, 0, 0, "-", "util"]], "opendataval.experiment.ExperimentMediator": [[79, 3, 1, "", "__init__"]], "opendataval.experiment.api": [[112, 2, 1, "", "ExperimentMediator"]], "opendataval.experiment.api.ExperimentMediator": [[112, 3, 1, "", "compute_data_values"], [112, 3, 1, "", "evaluate"], [112, 3, 1, "", "model_factory_setup"], [112, 3, 1, "", "plot"], [112, 3, 1, "", "save_output"], [112, 3, 1, "", "set_output_directory"], [112, 3, 1, "", "setup"]], "opendataval.experiment.exper_methods": [[112, 4, 1, "", "discover_corrupted_sample"], [112, 4, 1, "", "increasing_bin_removal"], [112, 4, 1, "", "noisy_detection"], [112, 4, 1, "", "remove_high_low"], [112, 4, 1, "", "save_dataval"]], "opendataval.experiment.util": [[112, 4, 1, "", "f1_score"], [112, 4, 1, "", "filter_kwargs"], [112, 4, 1, "", "oned_twonn_clustering"]], "opendataval.metrics": [[98, 2, 1, "", "Metrics"], [98, 4, 1, "", "accuracy"], [98, 4, 1, "", "neg_l2"], [98, 4, 1, "", "neg_mse"]], "opendataval.metrics.Metrics": [[98, 6, 1, "", "ACCURACY"], [98, 6, 1, "", "NEG_L2"], [98, 6, 1, "", "NEG_MSE"]], "opendataval.model": [[82, 2, 1, "", "ClassifierSkLearnWrapper"], [83, 2, 1, "", "ClassifierUnweightedSkLearnWrapper"], [84, 2, 1, "", "GradientModel"], [85, 2, 1, "", "Model"], [113, 4, 1, "", "ModelFactory"], [87, 2, 1, "", "RegressionSkLearnWrapper"], [88, 2, 1, "", "TorchClassMixin"], [89, 2, 1, "", "TorchGradMixin"], [90, 2, 1, "", "TorchPredictMixin"], [91, 2, 1, "", "TorchRegressMixin"], [113, 0, 0, "-", "api"], [113, 0, 0, "-", "bert"], [113, 0, 0, "-", "grad"], [113, 0, 0, "-", "lenet"], [113, 0, 0, "-", "logistic_regression"], [113, 0, 0, "-", "mlp"]], "opendataval.model.ClassifierSkLearnWrapper": [[82, 3, 1, "", "__init__"]], "opendataval.model.ClassifierUnweightedSkLearnWrapper": [[83, 3, 1, "", "__init__"]], "opendataval.model.GradientModel": [[84, 3, 1, "", "__init__"]], "opendataval.model.Model": [[85, 3, 1, "", "__init__"]], "opendataval.model.RegressionSkLearnWrapper": [[87, 3, 1, "", "__init__"]], "opendataval.model.TorchClassMixin": [[88, 3, 1, "", "__init__"]], "opendataval.model.TorchGradMixin": [[89, 3, 1, "", "__init__"]], "opendataval.model.TorchPredictMixin": [[90, 3, 1, "", "__init__"]], "opendataval.model.TorchRegressMixin": [[91, 3, 1, "", "__init__"]], "opendataval.model.api": [[113, 2, 1, "", "ClassifierSkLearnWrapper"], [113, 2, 1, "", "ClassifierUnweightedSkLearnWrapper"], [113, 2, 1, "", "Model"], [113, 2, 1, "", "RegressionSkLearnWrapper"], [113, 2, 1, "", "TorchClassMixin"], [113, 2, 1, "", "TorchModel"], [113, 2, 1, "", "TorchPredictMixin"], [113, 2, 1, "", "TorchRegressMixin"], [113, 4, 1, "", "to_numpy"]], "opendataval.model.api.ClassifierSkLearnWrapper": [[113, 3, 1, "", "fit"], [113, 3, 1, "", "predict"]], "opendataval.model.api.ClassifierUnweightedSkLearnWrapper": [[113, 3, 1, "", "fit"]], "opendataval.model.api.Model": [[113, 6, 1, "", "Models"], [113, 3, 1, "", "clone"], [113, 3, 1, "", "fit"], [113, 3, 1, "", "predict"]], "opendataval.model.api.RegressionSkLearnWrapper": [[113, 3, 1, "", "fit"], [113, 3, 1, "", "predict"]], "opendataval.model.api.TorchClassMixin": [[113, 3, 1, "", "fit"], [113, 6, 1, "", "training"]], "opendataval.model.api.TorchModel": [[113, 5, 1, "", "device"]], "opendataval.model.api.TorchPredictMixin": [[113, 3, 1, "", "predict"], [113, 6, 1, "", "training"]], "opendataval.model.api.TorchRegressMixin": [[113, 3, 1, "", "fit"], [113, 6, 1, "", "training"]], "opendataval.model.bert": [[113, 2, 1, "", "BertClassifier"]], "opendataval.model.bert.BertClassifier": [[113, 3, 1, "", "fit"], [113, 3, 1, "", "forward"], [113, 3, 1, "", "predict"], [113, 3, 1, "", "tokenize"]], "opendataval.model.grad": [[113, 2, 1, "", "GradientModel"], [113, 2, 1, "", "TorchGradMixin"]], "opendataval.model.grad.GradientModel": [[113, 3, 1, "", "grad"]], "opendataval.model.grad.TorchGradMixin": [[113, 3, 1, "", "grad"], [113, 6, 1, "", "training"]], "opendataval.model.lenet": [[113, 2, 1, "", "LeNet"]], "opendataval.model.lenet.LeNet": [[113, 3, 1, "", "forward"]], "opendataval.model.logistic_regression": [[113, 2, 1, "", "LogisticRegression"]], "opendataval.model.logistic_regression.LogisticRegression": [[113, 3, 1, "", "forward"]], "opendataval.model.mlp": [[113, 2, 1, "", "ClassifierMLP"], [113, 2, 1, "", "RegressionMLP"]], "opendataval.model.mlp.ClassifierMLP": [[113, 3, 1, "", "forward"]], "opendataval.model.mlp.RegressionMLP": [[113, 3, 1, "", "forward"]], "opendataval.util": [[98, 2, 1, "", "FuncEnum"], [98, 2, 1, "", "MeanStdTime"], [98, 2, 1, "", "ParamSweep"], [98, 2, 1, "", "ReprMixin"], [98, 2, 1, "", "StrEnum"], [98, 4, 1, "", "batched"], [98, 4, 1, "", "get_name"], [98, 4, 1, "", "load_mediator_output"], [98, 4, 1, "", "set_random_state"], [98, 2, 1, "", "wrapper"]], "opendataval.util.FuncEnum": [[98, 3, 1, "", "wrap"]], "opendataval.util.ParamSweep": [[98, 3, 1, "", "sweep"]]}, "objtypes": {"0": "py:module", "1": "py:data", "2": "py:class", "3": "py:method", "4": "py:function", "5": "py:property", "6": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "data", "Python data"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "function", "Python function"], "5": ["py", "property", "Python property"], "6": ["py", "attribute", "Python attribute"]}, "titleterms": {"opendatav": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114], "dataload": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 99, 100], "dataset": [0, 1, 2, 7, 8, 9, 10, 51, 52, 53, 54, 100], "imageset": [1, 9, 53, 100], "nlpset": [2, 10, 54, 100], "catdataset": [3, 47], "paramet": [3, 4, 5, 6, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 31, 32, 33, 35, 36, 39, 40, 47, 48, 49, 50, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 76, 77, 79, 82, 83, 86, 87, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113], "rais": [3, 4, 6, 12, 39, 47, 48, 50, 56, 86, 99, 107, 113], "datafetch": [4, 48], "attribut": [4, 17, 26, 31, 33, 48, 62, 71, 76, 79, 99, 101, 108, 112], "regist": [5, 49, 99], "warn": [5, 49, 99], "cach": [6, 50], "return": [6, 11, 39, 50, 55, 86, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113], "data": [7, 46, 51, 57, 99, 100, 101, 114], "set": [7, 46, 51, 99, 100], "mix_label": [11, 55], "one_hot_encod": [12, 56], "datav": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111], "am": [13, 58, 102], "refer": [13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 31, 32, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 76, 77, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113], "betashaplei": [14, 59], "dvrl": [15, 60, 104], "databanzhaf": [16, 61], "dataevalu": [17, 62], "dataoob": [18, 63], "datashaplei": [19, 64], "grtmcsampler": [20, 65], "influencefunct": [21, 66], "influencesubsampl": [22, 67], "knnshaplei": [23, 68], "lavaevalu": [24, 69], "mixin": [24, 29, 69, 74, 81, 107, 111, 113], "leaveoneout": [25, 70], "modellessmixin": [26, 71], "modelmixin": [27, 72], "randomevalu": [28, 73], "robustvolumeshaplei": [29, 74], "sampler": [30, 75, 108], "shapevalu": [31, 76], "tmcsampler": [32, 77], "experi": [33, 34, 78, 79, 80, 112], "experimentmedi": [33, 79], "exper_method": [34, 80, 112], "model": [35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 113], "classifiersklearnwrapp": [35, 82], "classifierunweightedsklearnwrapp": [36, 83], "gradientmodel": [37, 84], "modelfactori": [39, 86], "regressionsklearnwrapp": [40, 87], "torchclassmixin": [41, 88], "torchgradmixin": [42, 89], "torchpredictmixin": [43, 90], "torchregressmixin": [44, 91], "__version__": 45, "loader": [46, 99], "creat": [46, 99], "load": [46, 99], "util": [46, 92, 93, 98, 99, 112], "evalu": [57, 101], "catalog": [57, 101], "setup": [78, 112], "api": [81, 101, 112, 113], "torch": [81, 113], "sci": [81, 113], "kit": [81, 113], "learn": [81, 113], "wrapper": [81, 113], "default": [81, 113], "hyperparamet": [81, 113], "load_mediator_output": 92, "set_random_st": 93, "document": 94, "abstract": 94, "indic": 94, "tabl": 94, "leaderboard": 95, "licens": 96, "packag": [98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113], "subpackag": [98, 99, 101], "submodul": [98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113], "metric": 98, "modul": [98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113], "content": [98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113], "fetcher": 99, "noisifi": 99, "challeng": 100, "csshap": 103, "influenc": 105, "infsub": 105, "knnshap": 106, "lava": 107, "otdd": 107, "margcontrib": 108, "banzhaf": 108, "betashap": 108, "datashap": 108, "loo": 108, "note": 108, "shap": 108, "oob": 109, "random": 110, "volum": 111, "rv": 111, "bert": 113, "grad": 113, "yield": 113, "lenet": 113, "logistic_regress": 113, "mlp": 113, "unifi": 114, "benchmark": 114, "valuat": 114}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 60}, "alltitles": {"opendataval.dataloader.datasets.datasets": [[0, "module-opendataval.dataloader.datasets.datasets"], [8, "module-opendataval.dataloader.datasets.datasets"], [52, "module-opendataval.dataloader.datasets.datasets"]], "opendataval.dataloader.datasets.imagesets": [[1, "module-opendataval.dataloader.datasets.imagesets"], [9, "module-opendataval.dataloader.datasets.imagesets"], [53, "module-opendataval.dataloader.datasets.imagesets"]], "opendataval.dataloader.datasets.nlpsets": [[2, "module-opendataval.dataloader.datasets.nlpsets"], [10, "module-opendataval.dataloader.datasets.nlpsets"], [54, "module-opendataval.dataloader.datasets.nlpsets"]], "opendataval.dataloader.CatDataset": [[3, "opendataval-dataloader-catdataset"], [47, "opendataval-dataloader-catdataset"]], "Parameters": [[3, "parameters"], [4, "parameters"], [5, "parameters"], [6, "parameters"], [11, "parameters"], [13, "parameters"], [14, "parameters"], [15, "parameters"], [16, "parameters"], [17, "parameters"], [18, "parameters"], [19, "parameters"], [20, "parameters"], [21, "parameters"], [22, "parameters"], [23, "parameters"], [24, "parameters"], [25, "parameters"], [28, "parameters"], [29, "parameters"], [31, "parameters"], [32, "parameters"], [33, "parameters"], [35, "parameters"], [36, "parameters"], [39, "parameters"], [40, "parameters"], [47, "parameters"], [48, "parameters"], [49, "parameters"], [50, "parameters"], [55, "parameters"], [58, "parameters"], [59, "parameters"], [60, "parameters"], [61, "parameters"], [62, "parameters"], [63, "parameters"], [64, "parameters"], [65, "parameters"], [66, "parameters"], [67, "parameters"], [68, "parameters"], [69, "parameters"], [70, "parameters"], [73, "parameters"], [74, "parameters"], [76, "parameters"], [77, "parameters"], [79, "parameters"], [82, "parameters"], [83, "parameters"], [86, "parameters"], [87, "parameters"], [99, "parameters"], [99, "id1"], [99, "id3"], [99, "id5"], [99, "id7"], [99, "id10"], [99, "id13"], [99, "id15"], [99, "id17"], [99, "id18"], [99, "id20"], [99, "id24"], [99, "id26"], [99, "id27"], [100, "parameters"], [100, "id8"], [101, "parameters"], [101, "id1"], [101, "id3"], [101, "id5"], [101, "id7"], [101, "id12"], [101, "id14"], [101, "id15"], [101, "id16"], [102, "parameters"], [102, "id2"], [102, "id5"], [102, "id7"], [102, "id8"], [103, "parameters"], [103, "id6"], [104, "parameters"], [104, "id2"], [104, "id3"], [104, "id6"], [104, "id7"], [104, "id9"], [104, "id12"], [105, "parameters"], [105, "id2"], [105, "id3"], [105, "id6"], [105, "id9"], [105, "id11"], [105, "id14"], [106, "parameters"], [107, "parameters"], [107, "id10"], [107, "id12"], [107, "id14"], [107, "id16"], [108, "parameters"], [108, "id2"], [108, "id5"], [108, "id8"], [108, "id16"], [108, "id26"], [108, "id34"], [108, "id36"], [108, "id37"], [108, "id41"], [108, "id42"], [108, "id43"], [108, "id45"], [108, "id46"], [108, "id49"], [108, "id53"], [108, "id55"], [109, "parameters"], [109, "id2"], [109, "id3"], [109, "id4"], [110, "parameters"], [111, "parameters"], [111, "id6"], [111, "id7"], [112, "parameters"], [112, "id1"], [112, "id2"], [112, "id3"], [112, "id5"], [112, "id7"], [112, "id8"], [112, "id11"], [112, "id13"], [112, "id15"], [112, "id17"], [112, "id21"], [113, "parameters"], [113, "id1"], [113, "id2"], [113, "id3"], [113, "id4"], [113, "id6"], [113, "id8"], [113, "id10"], [113, "id11"], [113, "id12"], [113, "id14"], [113, "id15"], [113, "id17"], [113, "id20"], [113, "id21"], [113, "id23"], [113, "id25"], [113, "id27"], [113, "id29"], [113, "id30"], [113, "id34"], [113, "id35"], [113, "id36"], [113, "id38"], [113, "id39"], [113, "id41"], [113, "id42"], [113, "id44"]], "Raises": [[3, "raises"], [4, "raises"], [6, "raises"], [12, "raises"], [39, "raises"], [47, "raises"], [48, "raises"], [50, "raises"], [56, "raises"], [86, "raises"], [99, "raises"], [99, "id2"], [99, "id4"], [99, "id9"], [99, "id12"], [99, "id22"], [99, "id23"], [99, "id25"], [107, "raises"], [113, "raises"]], "opendataval.dataloader.DataFetcher": [[4, "opendataval-dataloader-datafetcher"], [48, "opendataval-dataloader-datafetcher"]], "Attributes": [[4, "attributes"], [17, "attributes"], [26, "attributes"], [31, "attributes"], [33, "attributes"], [48, "attributes"], [62, "attributes"], [71, "attributes"], [76, "attributes"], [79, "attributes"], [99, "attributes"], [101, "attributes"], [101, "id10"], [108, "attributes"], [112, "attributes"]], "opendataval.dataloader.Register": [[5, "opendataval-dataloader-register"], [49, "opendataval-dataloader-register"]], "Warns": [[5, "warns"], [49, "warns"], [99, "warns"]], "opendataval.dataloader.cache": [[6, "opendataval-dataloader-cache"], [50, "opendataval-dataloader-cache"]], "Returns": [[6, "returns"], [11, "returns"], [39, "returns"], [50, "returns"], [55, "returns"], [86, "returns"], [99, "returns"], [99, "id6"], [99, "id8"], [99, "id11"], [99, "id14"], [99, "id16"], [99, "id19"], [99, "id21"], [100, "returns"], [101, "returns"], [101, "id2"], [101, "id4"], [101, "id6"], [101, "id8"], [101, "id11"], [101, "id13"], [101, "id17"], [102, "returns"], [102, "id6"], [104, "returns"], [104, "id8"], [104, "id13"], [105, "returns"], [105, "id10"], [106, "returns"], [107, "returns"], [107, "id11"], [107, "id13"], [107, "id15"], [107, "id17"], [108, "returns"], [108, "id13"], [108, "id23"], [108, "id31"], [108, "id35"], [108, "id44"], [108, "id54"], [109, "returns"], [111, "returns"], [111, "id8"], [111, "id9"], [112, "returns"], [112, "id4"], [112, "id6"], [112, "id9"], [112, "id12"], [112, "id14"], [112, "id16"], [112, "id18"], [112, "id22"], [113, "returns"], [113, "id5"], [113, "id7"], [113, "id9"], [113, "id13"], [113, "id16"], [113, "id22"], [113, "id24"], [113, "id26"], [113, "id28"], [113, "id37"], [113, "id40"], [113, "id43"], [113, "id45"]], "opendataval.dataloader.datasets": [[7, "module-opendataval.dataloader.datasets"], [51, "module-opendataval.dataloader.datasets"]], "Data sets": [[7, "data-sets"], [51, "data-sets"], [100, "data-sets"]], "opendataval.dataloader.mix_labels": [[11, "opendataval-dataloader-mix-labels"], [55, "opendataval-dataloader-mix-labels"]], "opendataval.dataloader.one_hot_encode": [[12, "opendataval-dataloader-one-hot-encode"], [56, "opendataval-dataloader-one-hot-encode"]], "opendataval.dataval.AME": [[13, "opendataval-dataval-ame"], [58, "opendataval-dataval-ame"]], "References": [[13, "references"], [14, "references"], [15, "references"], [16, "references"], [18, "references"], [19, "references"], [20, "references"], [21, "references"], [22, "references"], [23, "references"], [24, "references"], [25, "references"], [26, "references"], [29, "references"], [31, "references"], [32, "references"], [58, "references"], [59, "references"], [60, "references"], [61, "references"], [63, "references"], [64, "references"], [65, "references"], [66, "references"], [67, "references"], [68, "references"], [69, "references"], [70, "references"], [71, "references"], [74, "references"], [76, "references"], [77, "references"], [100, "references"], [100, "id3"], [100, "id5"], [100, "id9"], [100, "id12"], [100, "id14"], [101, "references"], [102, "references"], [102, "id3"], [103, "references"], [104, "references"], [104, "id4"], [104, "id10"], [105, "references"], [105, "id4"], [105, "id7"], [106, "references"], [106, "id2"], [107, "references"], [107, "id2"], [107, "id6"], [108, "references"], [108, "id3"], [108, "id6"], [108, "id14"], [108, "id21"], [108, "id24"], [108, "id32"], [108, "id38"], [108, "id47"], [108, "id50"], [109, "references"], [111, "references"], [112, "references"], [112, "id19"], [113, "references"], [113, "id32"]], "opendataval.dataval.BetaShapley": [[14, "opendataval-dataval-betashapley"], [59, "opendataval-dataval-betashapley"]], "opendataval.dataval.DVRL": [[15, "opendataval-dataval-dvrl"], [60, "opendataval-dataval-dvrl"]], "opendataval.dataval.DataBanzhaf": [[16, "opendataval-dataval-databanzhaf"], [61, "opendataval-dataval-databanzhaf"]], "opendataval.dataval.DataEvaluator": [[17, "opendataval-dataval-dataevaluator"], [62, "opendataval-dataval-dataevaluator"]], "opendataval.dataval.DataOob": [[18, "opendataval-dataval-dataoob"], [63, "opendataval-dataval-dataoob"]], "opendataval.dataval.DataShapley": [[19, "opendataval-dataval-datashapley"], [64, "opendataval-dataval-datashapley"]], "opendataval.dataval.GrTMCSampler": [[20, "opendataval-dataval-grtmcsampler"], [65, "opendataval-dataval-grtmcsampler"]], "opendataval.dataval.InfluenceFunction": [[21, "opendataval-dataval-influencefunction"], [66, "opendataval-dataval-influencefunction"]], "opendataval.dataval.InfluenceSubsample": [[22, "opendataval-dataval-influencesubsample"], [67, "opendataval-dataval-influencesubsample"]], "opendataval.dataval.KNNShapley": [[23, "opendataval-dataval-knnshapley"], [68, "opendataval-dataval-knnshapley"]], "opendataval.dataval.LavaEvaluator": [[24, "opendataval-dataval-lavaevaluator"], [69, "opendataval-dataval-lavaevaluator"]], "Mixins": [[24, "mixins"], [29, "mixins"], [69, "mixins"], [74, "mixins"], [107, "mixins"], [111, "mixins"]], "opendataval.dataval.LeaveOneOut": [[25, "opendataval-dataval-leaveoneout"], [70, "opendataval-dataval-leaveoneout"]], "opendataval.dataval.ModelLessMixin": [[26, "opendataval-dataval-modellessmixin"], [71, "opendataval-dataval-modellessmixin"]], "opendataval.dataval.ModelMixin": [[27, "opendataval-dataval-modelmixin"], [72, "opendataval-dataval-modelmixin"]], "opendataval.dataval.RandomEvaluator": [[28, "opendataval-dataval-randomevaluator"], [73, "opendataval-dataval-randomevaluator"]], "opendataval.dataval.RobustVolumeShapley": [[29, "opendataval-dataval-robustvolumeshapley"], [74, "opendataval-dataval-robustvolumeshapley"]], "opendataval.dataval.Sampler": [[30, "opendataval-dataval-sampler"], [75, "opendataval-dataval-sampler"]], "opendataval.dataval.ShapEvaluator": [[31, "opendataval-dataval-shapevaluator"], [76, "opendataval-dataval-shapevaluator"]], "opendataval.dataval.TMCSampler": [[32, "opendataval-dataval-tmcsampler"], [77, "opendataval-dataval-tmcsampler"]], "opendataval.experiment.ExperimentMediator": [[33, "opendataval-experiment-experimentmediator"], [79, "opendataval-experiment-experimentmediator"]], "opendataval.experiment.exper_methods": [[34, "module-opendataval.experiment.exper_methods"], [80, "module-opendataval.experiment.exper_methods"]], "opendataval.model.ClassifierSkLearnWrapper": [[35, "opendataval-model-classifiersklearnwrapper"], [82, "opendataval-model-classifiersklearnwrapper"]], "opendataval.model.ClassifierUnweightedSkLearnWrapper": [[36, "opendataval-model-classifierunweightedsklearnwrapper"], [83, "opendataval-model-classifierunweightedsklearnwrapper"]], "opendataval.model.GradientModel": [[37, "opendataval-model-gradientmodel"], [84, "opendataval-model-gradientmodel"]], "opendataval.model.Model": [[38, "opendataval-model-model"], [85, "opendataval-model-model"]], "opendataval.model.ModelFactory": [[39, "opendataval-model-modelfactory"], [86, "opendataval-model-modelfactory"]], "opendataval.model.RegressionSkLearnWrapper": [[40, "opendataval-model-regressionsklearnwrapper"], [87, "opendataval-model-regressionsklearnwrapper"]], "opendataval.model.TorchClassMixin": [[41, "opendataval-model-torchclassmixin"], [88, "opendataval-model-torchclassmixin"]], "opendataval.model.TorchGradMixin": [[42, "opendataval-model-torchgradmixin"], [89, "opendataval-model-torchgradmixin"]], "opendataval.model.TorchPredictMixin": [[43, "opendataval-model-torchpredictmixin"], [90, "opendataval-model-torchpredictmixin"]], "opendataval.model.TorchRegressMixin": [[44, "opendataval-model-torchregressmixin"], [91, "opendataval-model-torchregressmixin"]], "opendataval.__version__": [[45, "opendataval-version"]], "opendataval.dataloader": [[46, "module-opendataval.dataloader"]], "Data Loader": [[46, "data-loader"], [99, "data-loader"]], "Creating/Loading data sets": [[46, "creating-loading-data-sets"], [99, "creating-loading-data-sets"]], "Utils": [[46, "utils"], [98, "utils"], [99, "utils"]], "opendataval.dataval": [[57, "module-opendataval.dataval"]], "Data Evaluator": [[57, "data-evaluator"], [101, "data-evaluator"]], "Catalog": [[57, "catalog"], [101, "catalog"]], "opendataval.experiment": [[78, "module-opendataval.experiment"]], "Experiment": [[78, "experiment"], [112, "experiment"]], "Experiment Setup": [[78, "experiment-setup"], [112, "experiment-setup"]], "Experiments": [[78, "experiments"], [112, "experiments"]], "opendataval.model": [[81, "module-opendataval.model"]], "Models": [[81, "models"], [113, "models"]], "API": [[81, "api"], [113, "api"]], "Torch Mixins": [[81, "torch-mixins"], [113, "torch-mixins"]], "Sci-kit learn wrappers": [[81, "sci-kit-learn-wrappers"], [113, "sci-kit-learn-wrappers"]], "Default Hyperparameters": [[81, "default-hyperparameters"], [113, "default-hyperparameters"]], "opendataval.util.load_mediator_output": [[92, "opendataval-util-load-mediator-output"]], "opendataval.util.set_random_state": [[93, "opendataval-util-set-random-state"]], "OpenDataVal Documentation": [[94, "opendataval-documentation"]], "Abstract": [[94, "abstract"]], "Indices and tables": [[94, "indices-and-tables"]], "OpenDataVal Leaderboards": [[95, "opendataval-leaderboards"]], "OpenDataVal license": [[96, "opendataval-license"]], "opendataval": [[97, "opendataval"], [98, "opendataval"]], "opendataval package": [[98, "opendataval-package"]], "Subpackages": [[98, "subpackages"], [99, "subpackages"], [101, "subpackages"]], "Submodules": [[98, "submodules"], [99, "submodules"], [100, "submodules"], [101, "submodules"], [102, "submodules"], [103, "submodules"], [104, "submodules"], [105, "submodules"], [106, "submodules"], [107, "submodules"], [108, "submodules"], [109, "submodules"], [110, "submodules"], [111, "submodules"], [112, "submodules"], [113, "submodules"]], "opendataval.metrics module": [[98, "module-opendataval.metrics"]], "opendataval.util module": [[98, "module-opendataval.util"]], "Module contents": [[98, "module-opendataval"], [99, "module-opendataval.dataloader"], [100, "module-opendataval.dataloader.datasets"], [101, "module-opendataval.dataval"], [102, "module-opendataval.dataval.ame"], [103, "module-opendataval.dataval.csshap"], [104, "module-opendataval.dataval.dvrl"], [105, "module-opendataval.dataval.influence"], [106, "module-opendataval.dataval.knnshap"], [107, "module-opendataval.dataval.lava"], [108, "module-opendataval.dataval.margcontrib"], [109, "module-opendataval.dataval.oob"], [110, "module-opendataval.dataval.random"], [111, "module-opendataval.dataval.volume"], [112, "module-opendataval.experiment"], [113, "module-opendataval.model"]], "Modules": [[98, "modules"]], "opendataval.dataloader package": [[99, "opendataval-dataloader-package"]], "opendataval.dataloader.fetcher module": [[99, "module-opendataval.dataloader.fetcher"]], "opendataval.dataloader.noisify module": [[99, "module-opendataval.dataloader.noisify"]], "opendataval.dataloader.register module": [[99, "module-opendataval.dataloader.register"]], "opendataval.dataloader.util module": [[99, "module-opendataval.dataloader.util"]], "opendataval.dataloader.datasets package": [[100, "opendataval-dataloader-datasets-package"]], "opendataval.dataloader.datasets.challenge module": [[100, "module-opendataval.dataloader.datasets.challenge"]], "opendataval.dataloader.datasets.datasets module": [[100, "module-opendataval.dataloader.datasets.datasets"]], "opendataval.dataloader.datasets.imagesets module": [[100, "module-opendataval.dataloader.datasets.imagesets"]], "opendataval.dataloader.datasets.nlpsets module": [[100, "module-opendataval.dataloader.datasets.nlpsets"]], "opendataval.dataval package": [[101, "opendataval-dataval-package"]], "opendataval.dataval.api module": [[101, "module-opendataval.dataval.api"]], "opendataval.dataval.ame package": [[102, "opendataval-dataval-ame-package"]], "opendataval.dataval.ame.ame module": [[102, "module-opendataval.dataval.ame.ame"]], "opendataval.dataval.csshap package": [[103, "opendataval-dataval-csshap-package"]], "opendataval.dataval.csshap.csshap module": [[103, "module-opendataval.dataval.csshap.csshap"]], "opendataval.dataval.dvrl package": [[104, "opendataval-dataval-dvrl-package"]], "opendataval.dataval.dvrl.dvrl module": [[104, "module-opendataval.dataval.dvrl.dvrl"]], "opendataval.dataval.influence package": [[105, "opendataval-dataval-influence-package"]], "opendataval.dataval.influence.influence module": [[105, "module-opendataval.dataval.influence.influence"]], "opendataval.dataval.influence.infsub module": [[105, "module-opendataval.dataval.influence.infsub"]], "opendataval.dataval.knnshap package": [[106, "opendataval-dataval-knnshap-package"]], "opendataval.dataval.knnshap.knnshap module": [[106, "module-opendataval.dataval.knnshap.knnshap"]], "opendataval.dataval.lava package": [[107, "opendataval-dataval-lava-package"]], "opendataval.dataval.lava.lava module": [[107, "module-opendataval.dataval.lava.lava"]], "opendataval.dataval.lava.otdd module": [[107, "module-opendataval.dataval.lava.otdd"]], "opendataval.dataval.margcontrib package": [[108, "opendataval-dataval-margcontrib-package"]], "opendataval.dataval.margcontrib.banzhaf module": [[108, "module-opendataval.dataval.margcontrib.banzhaf"]], "opendataval.dataval.margcontrib.betashap module": [[108, "module-opendataval.dataval.margcontrib.betashap"]], "opendataval.dataval.margcontrib.datashap module": [[108, "module-opendataval.dataval.margcontrib.datashap"]], "opendataval.dataval.margcontrib.loo module": [[108, "module-opendataval.dataval.margcontrib.loo"]], "opendataval.dataval.margcontrib.sampler module": [[108, "module-opendataval.dataval.margcontrib.sampler"]], "Notes": [[108, "notes"]], "opendataval.dataval.margcontrib.shap module": [[108, "module-opendataval.dataval.margcontrib.shap"]], "opendataval.dataval.oob package": [[109, "opendataval-dataval-oob-package"]], "opendataval.dataval.oob.oob module": [[109, "module-opendataval.dataval.oob.oob"]], "opendataval.dataval.random package": [[110, "opendataval-dataval-random-package"]], "opendataval.dataval.random.random module": [[110, "module-opendataval.dataval.random.random"]], "opendataval.dataval.volume package": [[111, "opendataval-dataval-volume-package"]], "opendataval.dataval.volume.rvs module": [[111, "module-opendataval.dataval.volume.rvs"]], "opendataval.experiment package": [[112, "opendataval-experiment-package"]], "opendataval.experiment.api module": [[112, "module-opendataval.experiment.api"]], "opendataval.experiment.exper_methods module": [[112, "module-opendataval.experiment.exper_methods"]], "opendataval.experiment.util module": [[112, "module-opendataval.experiment.util"]], "opendataval.model package": [[113, "opendataval-model-package"]], "opendataval.model.api module": [[113, "module-opendataval.model.api"]], "opendataval.model.bert module": [[113, "module-opendataval.model.bert"]], "opendataval.model.grad module": [[113, "module-opendataval.model.grad"]], "Yields": [[113, "yields"], [113, "id31"]], "opendataval.model.lenet module": [[113, "module-opendataval.model.lenet"]], "opendataval.model.logistic_regression module": [[113, "module-opendataval.model.logistic_regression"]], "opendataval.model.mlp module": [[113, "module-opendataval.model.mlp"]], "OpenDataVal: a Unified Benchmark for Data Valuation": [[114, "opendataval-a-unified-benchmark-for-data-valuation"]]}, "indexentries": {"module": [[0, "module-opendataval.dataloader.datasets.datasets"], [1, "module-opendataval.dataloader.datasets.imagesets"], [2, "module-opendataval.dataloader.datasets.nlpsets"], [7, "module-opendataval.dataloader.datasets"], [8, "module-opendataval.dataloader.datasets.datasets"], [9, "module-opendataval.dataloader.datasets.imagesets"], [10, "module-opendataval.dataloader.datasets.nlpsets"], [34, "module-opendataval.experiment.exper_methods"], [46, "module-opendataval.dataloader"], [51, "module-opendataval.dataloader.datasets"], [52, "module-opendataval.dataloader.datasets.datasets"], [53, "module-opendataval.dataloader.datasets.imagesets"], [54, "module-opendataval.dataloader.datasets.nlpsets"], [57, "module-opendataval.dataval"], [78, "module-opendataval.experiment"], [80, "module-opendataval.experiment.exper_methods"], [81, "module-opendataval.model"], [98, "module-opendataval"], [98, "module-opendataval.metrics"], [98, "module-opendataval.util"], [99, "module-opendataval.dataloader"], [99, "module-opendataval.dataloader.fetcher"], [99, "module-opendataval.dataloader.noisify"], [99, "module-opendataval.dataloader.register"], [99, "module-opendataval.dataloader.util"], [100, "module-opendataval.dataloader.datasets"], [100, "module-opendataval.dataloader.datasets.challenge"], [100, "module-opendataval.dataloader.datasets.datasets"], [100, "module-opendataval.dataloader.datasets.imagesets"], [100, "module-opendataval.dataloader.datasets.nlpsets"], [101, "module-opendataval.dataval"], [101, "module-opendataval.dataval.api"], [102, "module-opendataval.dataval.ame"], [102, "module-opendataval.dataval.ame.ame"], [103, "module-opendataval.dataval.csshap"], [103, "module-opendataval.dataval.csshap.csshap"], [104, "module-opendataval.dataval.dvrl"], [104, "module-opendataval.dataval.dvrl.dvrl"], [105, "module-opendataval.dataval.influence"], [105, "module-opendataval.dataval.influence.influence"], [105, "module-opendataval.dataval.influence.infsub"], [106, "module-opendataval.dataval.knnshap"], [106, "module-opendataval.dataval.knnshap.knnshap"], [107, "module-opendataval.dataval.lava"], [107, "module-opendataval.dataval.lava.lava"], [107, "module-opendataval.dataval.lava.otdd"], [108, "module-opendataval.dataval.margcontrib"], [108, "module-opendataval.dataval.margcontrib.banzhaf"], [108, "module-opendataval.dataval.margcontrib.betashap"], [108, "module-opendataval.dataval.margcontrib.datashap"], [108, "module-opendataval.dataval.margcontrib.loo"], [108, "module-opendataval.dataval.margcontrib.sampler"], [108, "module-opendataval.dataval.margcontrib.shap"], [109, "module-opendataval.dataval.oob"], [109, "module-opendataval.dataval.oob.oob"], [110, "module-opendataval.dataval.random"], [110, "module-opendataval.dataval.random.random"], [111, "module-opendataval.dataval.volume"], [111, "module-opendataval.dataval.volume.rvs"], [112, "module-opendataval.experiment"], [112, "module-opendataval.experiment.api"], [112, "module-opendataval.experiment.exper_methods"], [112, "module-opendataval.experiment.util"], [113, "module-opendataval.model"], [113, "module-opendataval.model.api"], [113, "module-opendataval.model.bert"], [113, "module-opendataval.model.grad"], [113, "module-opendataval.model.lenet"], [113, "module-opendataval.model.logistic_regression"], [113, "module-opendataval.model.mlp"]], "opendataval.dataloader.datasets.datasets": [[0, "module-opendataval.dataloader.datasets.datasets"], [8, "module-opendataval.dataloader.datasets.datasets"], [52, "module-opendataval.dataloader.datasets.datasets"], [100, "module-opendataval.dataloader.datasets.datasets"]], "opendataval.dataloader.datasets.imagesets": [[1, "module-opendataval.dataloader.datasets.imagesets"], [9, "module-opendataval.dataloader.datasets.imagesets"], [53, "module-opendataval.dataloader.datasets.imagesets"], [100, "module-opendataval.dataloader.datasets.imagesets"]], "opendataval.dataloader.datasets.nlpsets": [[2, "module-opendataval.dataloader.datasets.nlpsets"], [10, "module-opendataval.dataloader.datasets.nlpsets"], [54, "module-opendataval.dataloader.datasets.nlpsets"], [100, "module-opendataval.dataloader.datasets.nlpsets"]], "catdataset (class in opendataval.dataloader)": [[3, "opendataval.dataloader.CatDataset"], [47, "opendataval.dataloader.CatDataset"]], "__init__() (opendataval.dataloader.catdataset method)": [[3, "opendataval.dataloader.CatDataset.__init__"], [47, "opendataval.dataloader.CatDataset.__init__"]], "datafetcher (class in opendataval.dataloader)": [[4, "opendataval.dataloader.DataFetcher"], [48, "opendataval.dataloader.DataFetcher"]], "__init__() (opendataval.dataloader.datafetcher method)": [[4, "opendataval.dataloader.DataFetcher.__init__"], [48, "opendataval.dataloader.DataFetcher.__init__"]], "register (class in opendataval.dataloader)": [[5, "opendataval.dataloader.Register"], [49, "opendataval.dataloader.Register"]], "__init__() (opendataval.dataloader.register method)": [[5, "opendataval.dataloader.Register.__init__"], [49, "opendataval.dataloader.Register.__init__"]], "cache() (in module opendataval.dataloader)": [[6, "opendataval.dataloader.cache"], [50, "opendataval.dataloader.cache"]], "opendataval.dataloader.datasets": [[7, "module-opendataval.dataloader.datasets"], [51, "module-opendataval.dataloader.datasets"], [100, "module-opendataval.dataloader.datasets"]], "mix_labels() (in module opendataval.dataloader)": [[11, "opendataval.dataloader.mix_labels"], [55, "opendataval.dataloader.mix_labels"]], "one_hot_encode() (in module opendataval.dataloader)": [[12, "opendataval.dataloader.one_hot_encode"], [56, "opendataval.dataloader.one_hot_encode"]], "ame (class in opendataval.dataval)": [[13, "opendataval.dataval.AME"], [58, "opendataval.dataval.AME"]], "__init__() (opendataval.dataval.ame method)": [[13, "opendataval.dataval.AME.__init__"], [58, "opendataval.dataval.AME.__init__"]], "betashapley (class in opendataval.dataval)": [[14, "opendataval.dataval.BetaShapley"], [59, "opendataval.dataval.BetaShapley"]], "__init__() (opendataval.dataval.betashapley method)": [[14, "opendataval.dataval.BetaShapley.__init__"], [59, "opendataval.dataval.BetaShapley.__init__"]], "dvrl (class in opendataval.dataval)": [[15, "opendataval.dataval.DVRL"], [60, "opendataval.dataval.DVRL"]], "__init__() (opendataval.dataval.dvrl method)": [[15, "opendataval.dataval.DVRL.__init__"], [60, "opendataval.dataval.DVRL.__init__"]], "databanzhaf (class in opendataval.dataval)": [[16, "opendataval.dataval.DataBanzhaf"], [61, "opendataval.dataval.DataBanzhaf"]], "__init__() (opendataval.dataval.databanzhaf method)": [[16, "opendataval.dataval.DataBanzhaf.__init__"], [61, "opendataval.dataval.DataBanzhaf.__init__"]], "dataevaluator (class in opendataval.dataval)": [[17, "opendataval.dataval.DataEvaluator"], [62, "opendataval.dataval.DataEvaluator"]], "__init__() (opendataval.dataval.dataevaluator method)": [[17, "opendataval.dataval.DataEvaluator.__init__"], [62, "opendataval.dataval.DataEvaluator.__init__"]], "dataoob (class in opendataval.dataval)": [[18, "opendataval.dataval.DataOob"], [63, "opendataval.dataval.DataOob"]], "__init__() (opendataval.dataval.dataoob method)": [[18, "opendataval.dataval.DataOob.__init__"], [63, "opendataval.dataval.DataOob.__init__"]], "datashapley (class in opendataval.dataval)": [[19, "opendataval.dataval.DataShapley"], [64, "opendataval.dataval.DataShapley"]], "__init__() (opendataval.dataval.datashapley method)": [[19, "opendataval.dataval.DataShapley.__init__"], [64, "opendataval.dataval.DataShapley.__init__"]], "grtmcsampler (class in opendataval.dataval)": [[20, "opendataval.dataval.GrTMCSampler"], [65, "opendataval.dataval.GrTMCSampler"]], "__init__() (opendataval.dataval.grtmcsampler method)": [[20, "opendataval.dataval.GrTMCSampler.__init__"], [65, "opendataval.dataval.GrTMCSampler.__init__"]], "influencefunction (class in opendataval.dataval)": [[21, "opendataval.dataval.InfluenceFunction"], [66, "opendataval.dataval.InfluenceFunction"]], "__init__() (opendataval.dataval.influencefunction method)": [[21, "opendataval.dataval.InfluenceFunction.__init__"], [66, "opendataval.dataval.InfluenceFunction.__init__"]], "influencesubsample (class in opendataval.dataval)": [[22, "opendataval.dataval.InfluenceSubsample"], [67, "opendataval.dataval.InfluenceSubsample"]], "__init__() (opendataval.dataval.influencesubsample method)": [[22, "opendataval.dataval.InfluenceSubsample.__init__"], [67, "opendataval.dataval.InfluenceSubsample.__init__"]], "knnshapley (class in opendataval.dataval)": [[23, "opendataval.dataval.KNNShapley"], [68, "opendataval.dataval.KNNShapley"]], "__init__() (opendataval.dataval.knnshapley method)": [[23, "opendataval.dataval.KNNShapley.__init__"], [68, "opendataval.dataval.KNNShapley.__init__"]], "lavaevaluator (class in opendataval.dataval)": [[24, "opendataval.dataval.LavaEvaluator"], [69, "opendataval.dataval.LavaEvaluator"]], "__init__() (opendataval.dataval.lavaevaluator method)": [[24, "opendataval.dataval.LavaEvaluator.__init__"], [69, "opendataval.dataval.LavaEvaluator.__init__"]], "leaveoneout (class in opendataval.dataval)": [[25, "opendataval.dataval.LeaveOneOut"], [70, "opendataval.dataval.LeaveOneOut"]], "__init__() (opendataval.dataval.leaveoneout method)": [[25, "opendataval.dataval.LeaveOneOut.__init__"], [70, "opendataval.dataval.LeaveOneOut.__init__"]], "modellessmixin (class in opendataval.dataval)": [[26, "opendataval.dataval.ModelLessMixin"], [71, "opendataval.dataval.ModelLessMixin"]], "__init__() (opendataval.dataval.modellessmixin method)": [[26, "opendataval.dataval.ModelLessMixin.__init__"], [71, "opendataval.dataval.ModelLessMixin.__init__"]], "modelmixin (class in opendataval.dataval)": [[27, "opendataval.dataval.ModelMixin"], [72, "opendataval.dataval.ModelMixin"]], "__init__() (opendataval.dataval.modelmixin method)": [[27, "opendataval.dataval.ModelMixin.__init__"], [72, "opendataval.dataval.ModelMixin.__init__"]], "randomevaluator (class in opendataval.dataval)": [[28, "opendataval.dataval.RandomEvaluator"], [73, "opendataval.dataval.RandomEvaluator"]], "__init__() (opendataval.dataval.randomevaluator method)": [[28, "opendataval.dataval.RandomEvaluator.__init__"], [73, "opendataval.dataval.RandomEvaluator.__init__"]], "robustvolumeshapley (class in opendataval.dataval)": [[29, "opendataval.dataval.RobustVolumeShapley"], [74, "opendataval.dataval.RobustVolumeShapley"]], "__init__() (opendataval.dataval.robustvolumeshapley method)": [[29, "opendataval.dataval.RobustVolumeShapley.__init__"], [74, "opendataval.dataval.RobustVolumeShapley.__init__"]], "sampler (class in opendataval.dataval)": [[30, "opendataval.dataval.Sampler"], [75, "opendataval.dataval.Sampler"]], "__init__() (opendataval.dataval.sampler method)": [[30, "opendataval.dataval.Sampler.__init__"], [75, "opendataval.dataval.Sampler.__init__"]], "shapevaluator (class in opendataval.dataval)": [[31, "opendataval.dataval.ShapEvaluator"], [76, "opendataval.dataval.ShapEvaluator"]], "__init__() (opendataval.dataval.shapevaluator method)": [[31, "opendataval.dataval.ShapEvaluator.__init__"], [76, "opendataval.dataval.ShapEvaluator.__init__"]], "tmcsampler (class in opendataval.dataval)": [[32, "opendataval.dataval.TMCSampler"], [77, "opendataval.dataval.TMCSampler"]], "__init__() (opendataval.dataval.tmcsampler method)": [[32, "opendataval.dataval.TMCSampler.__init__"], [77, "opendataval.dataval.TMCSampler.__init__"]], "experimentmediator (class in opendataval.experiment)": [[33, "opendataval.experiment.ExperimentMediator"], [79, "opendataval.experiment.ExperimentMediator"]], "__init__() (opendataval.experiment.experimentmediator method)": [[33, "opendataval.experiment.ExperimentMediator.__init__"], [79, "opendataval.experiment.ExperimentMediator.__init__"]], "opendataval.experiment.exper_methods": [[34, "module-opendataval.experiment.exper_methods"], [80, "module-opendataval.experiment.exper_methods"], [112, "module-opendataval.experiment.exper_methods"]], "classifiersklearnwrapper (class in opendataval.model)": [[35, "opendataval.model.ClassifierSkLearnWrapper"], [82, "opendataval.model.ClassifierSkLearnWrapper"]], "__init__() (opendataval.model.classifiersklearnwrapper method)": [[35, "opendataval.model.ClassifierSkLearnWrapper.__init__"], [82, "opendataval.model.ClassifierSkLearnWrapper.__init__"]], "classifierunweightedsklearnwrapper (class in opendataval.model)": [[36, "opendataval.model.ClassifierUnweightedSkLearnWrapper"], [83, "opendataval.model.ClassifierUnweightedSkLearnWrapper"]], "__init__() (opendataval.model.classifierunweightedsklearnwrapper method)": [[36, "opendataval.model.ClassifierUnweightedSkLearnWrapper.__init__"], [83, "opendataval.model.ClassifierUnweightedSkLearnWrapper.__init__"]], "gradientmodel (class in opendataval.model)": [[37, "opendataval.model.GradientModel"], [84, "opendataval.model.GradientModel"]], "__init__() (opendataval.model.gradientmodel method)": [[37, "opendataval.model.GradientModel.__init__"], [84, "opendataval.model.GradientModel.__init__"]], "model (class in opendataval.model)": [[38, "opendataval.model.Model"], [85, "opendataval.model.Model"]], "__init__() (opendataval.model.model method)": [[38, "opendataval.model.Model.__init__"], [85, "opendataval.model.Model.__init__"]], "modelfactory() (in module opendataval.model)": [[39, "opendataval.model.ModelFactory"], [86, "opendataval.model.ModelFactory"], [113, "opendataval.model.ModelFactory"]], "regressionsklearnwrapper (class in opendataval.model)": [[40, "opendataval.model.RegressionSkLearnWrapper"], [87, "opendataval.model.RegressionSkLearnWrapper"]], "__init__() (opendataval.model.regressionsklearnwrapper method)": [[40, "opendataval.model.RegressionSkLearnWrapper.__init__"], [87, "opendataval.model.RegressionSkLearnWrapper.__init__"]], "torchclassmixin (class in opendataval.model)": [[41, "opendataval.model.TorchClassMixin"], [88, "opendataval.model.TorchClassMixin"]], "__init__() (opendataval.model.torchclassmixin method)": [[41, "opendataval.model.TorchClassMixin.__init__"], [88, "opendataval.model.TorchClassMixin.__init__"]], "torchgradmixin (class in opendataval.model)": [[42, "opendataval.model.TorchGradMixin"], [89, "opendataval.model.TorchGradMixin"]], "__init__() (opendataval.model.torchgradmixin method)": [[42, "opendataval.model.TorchGradMixin.__init__"], [89, "opendataval.model.TorchGradMixin.__init__"]], "torchpredictmixin (class in opendataval.model)": [[43, "opendataval.model.TorchPredictMixin"], [90, "opendataval.model.TorchPredictMixin"]], "__init__() (opendataval.model.torchpredictmixin method)": [[43, "opendataval.model.TorchPredictMixin.__init__"], [90, "opendataval.model.TorchPredictMixin.__init__"]], "torchregressmixin (class in opendataval.model)": [[44, "opendataval.model.TorchRegressMixin"], [91, "opendataval.model.TorchRegressMixin"]], "__init__() (opendataval.model.torchregressmixin method)": [[44, "opendataval.model.TorchRegressMixin.__init__"], [91, "opendataval.model.TorchRegressMixin.__init__"]], "__version__ (in module opendataval)": [[45, "opendataval.__version__"]], "opendataval.dataloader": [[46, "module-opendataval.dataloader"], [99, "module-opendataval.dataloader"]], "opendataval.dataval": [[57, "module-opendataval.dataval"], [101, "module-opendataval.dataval"]], "opendataval.experiment": [[78, "module-opendataval.experiment"], [112, "module-opendataval.experiment"]], "opendataval.model": [[81, "module-opendataval.model"], [113, "module-opendataval.model"]], "load_mediator_output() (in module opendataval.util)": [[92, "opendataval.util.load_mediator_output"], [98, "opendataval.util.load_mediator_output"]], "set_random_state() (in module opendataval.util)": [[93, "opendataval.util.set_random_state"], [98, "opendataval.util.set_random_state"]], "accuracy (opendataval.metrics.metrics attribute)": [[98, "opendataval.metrics.Metrics.ACCURACY"]], "funcenum (class in opendataval.util)": [[98, "opendataval.util.FuncEnum"]], "meanstdtime (class in opendataval.util)": [[98, "opendataval.util.MeanStdTime"]], "metrics (class in opendataval.metrics)": [[98, "opendataval.metrics.Metrics"]], "neg_l2 (opendataval.metrics.metrics attribute)": [[98, "opendataval.metrics.Metrics.NEG_L2"]], "neg_mse (opendataval.metrics.metrics attribute)": [[98, "opendataval.metrics.Metrics.NEG_MSE"]], "paramsweep (class in opendataval.util)": [[98, "opendataval.util.ParamSweep"]], "reprmixin (class in opendataval.util)": [[98, "opendataval.util.ReprMixin"]], "strenum (class in opendataval.util)": [[98, "opendataval.util.StrEnum"]], "accuracy() (in module opendataval.metrics)": [[98, "opendataval.metrics.accuracy"]], "batched() (in module opendataval.util)": [[98, "opendataval.util.batched"]], "get_name() (in module opendataval.util)": [[98, "opendataval.util.get_name"]], "neg_l2() (in module opendataval.metrics)": [[98, "opendataval.metrics.neg_l2"]], "neg_mse() (in module opendataval.metrics)": [[98, "opendataval.metrics.neg_mse"]], "opendataval": [[98, "module-opendataval"]], "opendataval.metrics": [[98, "module-opendataval.metrics"]], "opendataval.util": [[98, "module-opendataval.util"]], "sweep() (opendataval.util.paramsweep method)": [[98, "opendataval.util.ParamSweep.sweep"]], "wrap() (opendataval.util.funcenum static method)": [[98, "opendataval.util.FuncEnum.wrap"]], "wrapper (class in opendataval.util)": [[98, "opendataval.util.wrapper"]], "add_gauss_noise (opendataval.dataloader.noisify.noisefunc attribute)": [[99, "opendataval.dataloader.noisify.NoiseFunc.ADD_GAUSS_NOISE"]], "batch_cache (opendataval.dataloader.util.folderdataset attribute)": [[99, "opendataval.dataloader.util.FolderDataset.BATCH_CACHE"]], "cache_dir (opendataval.dataloader.register.register attribute)": [[99, "opendataval.dataloader.register.Register.CACHE_DIR"]], "catdataset (class in opendataval.dataloader.util)": [[99, "opendataval.dataloader.util.CatDataset"]], "datafetcher (class in opendataval.dataloader.fetcher)": [[99, "opendataval.dataloader.fetcher.DataFetcher"]], "datasets (opendataval.dataloader.register.register attribute)": [[99, "opendataval.dataloader.register.Register.Datasets"]], "folderdataset (class in opendataval.dataloader.util)": [[99, "opendataval.dataloader.util.FolderDataset"]], "indextransformdataset (class in opendataval.dataloader.util)": [[99, "opendataval.dataloader.util.IndexTransformDataset"]], "listdataset (class in opendataval.dataloader.util)": [[99, "opendataval.dataloader.util.ListDataset"]], "mix_labels (opendataval.dataloader.noisify.noisefunc attribute)": [[99, "opendataval.dataloader.noisify.NoiseFunc.MIX_LABELS"]], "noisefunc (class in opendataval.dataloader.noisify)": [[99, "opendataval.dataloader.noisify.NoiseFunc"]], "register (class in opendataval.dataloader.register)": [[99, "opendataval.dataloader.register.Register"]], "add_covar_transform() (opendataval.dataloader.register.register method)": [[99, "opendataval.dataloader.register.Register.add_covar_transform"]], "add_gauss_noise() (in module opendataval.dataloader.noisify)": [[99, "opendataval.dataloader.noisify.add_gauss_noise"]], "add_label_transform() (opendataval.dataloader.register.register method)": [[99, "opendataval.dataloader.register.Register.add_label_transform"]], "cache() (in module opendataval.dataloader.register)": [[99, "opendataval.dataloader.register.cache"]], "covar_dim (opendataval.dataloader.fetcher.datafetcher property)": [[99, "opendataval.dataloader.fetcher.DataFetcher.covar_dim"]], "datapoints (opendataval.dataloader.fetcher.datafetcher property)": [[99, "opendataval.dataloader.fetcher.DataFetcher.datapoints"]], "datasets_available() (opendataval.dataloader.fetcher.datafetcher static method)": [[99, "opendataval.dataloader.fetcher.DataFetcher.datasets_available"]], "exists() (opendataval.dataloader.util.folderdataset static method)": [[99, "opendataval.dataloader.util.FolderDataset.exists"]], "export_dataset() (opendataval.dataloader.fetcher.datafetcher method)": [[99, "opendataval.dataloader.fetcher.DataFetcher.export_dataset"]], "format_batch_path() (opendataval.dataloader.util.folderdataset method)": [[99, "opendataval.dataloader.util.FolderDataset.format_batch_path"]], "from_covar_func() (opendataval.dataloader.register.register method)": [[99, "opendataval.dataloader.register.Register.from_covar_func"]], "from_covar_label_func() (opendataval.dataloader.register.register method)": [[99, "opendataval.dataloader.register.Register.from_covar_label_func"]], "from_csv() (opendataval.dataloader.register.register method)": [[99, "opendataval.dataloader.register.Register.from_csv"]], "from_data() (opendataval.dataloader.fetcher.datafetcher class method)": [[99, "opendataval.dataloader.fetcher.DataFetcher.from_data"]], "from_data() (opendataval.dataloader.register.register method)": [[99, "opendataval.dataloader.register.Register.from_data"]], "from_data_splits() (opendataval.dataloader.fetcher.datafetcher class method)": [[99, "opendataval.dataloader.fetcher.DataFetcher.from_data_splits"]], "from_label_func() (opendataval.dataloader.register.register method)": [[99, "opendataval.dataloader.register.Register.from_label_func"]], "from_numpy() (opendataval.dataloader.register.register method)": [[99, "opendataval.dataloader.register.Register.from_numpy"]], "from_pandas() (opendataval.dataloader.register.register method)": [[99, "opendataval.dataloader.register.Register.from_pandas"]], "get_batch() (opendataval.dataloader.util.folderdataset method)": [[99, "opendataval.dataloader.util.FolderDataset.get_batch"]], "label_dim (opendataval.dataloader.fetcher.datafetcher property)": [[99, "opendataval.dataloader.fetcher.DataFetcher.label_dim"]], "load() (opendataval.dataloader.util.folderdataset class method)": [[99, "opendataval.dataloader.util.FolderDataset.load"]], "load_data() (opendataval.dataloader.register.register method)": [[99, "opendataval.dataloader.register.Register.load_data"]], "load_tensor() (in module opendataval.dataloader.util)": [[99, "opendataval.dataloader.util.load_tensor"]], "metadata (opendataval.dataloader.util.folderdataset property)": [[99, "opendataval.dataloader.util.FolderDataset.metadata"]], "mix_labels() (in module opendataval.dataloader.noisify)": [[99, "opendataval.dataloader.noisify.mix_labels"]], "noisify() (opendataval.dataloader.fetcher.datafetcher method)": [[99, "opendataval.dataloader.fetcher.DataFetcher.noisify"]], "num_points (opendataval.dataloader.fetcher.datafetcher property)": [[99, "opendataval.dataloader.fetcher.DataFetcher.num_points"]], "one_hot_encode() (in module opendataval.dataloader.register)": [[99, "opendataval.dataloader.register.one_hot_encode"]], "opendataval.dataloader.fetcher": [[99, "module-opendataval.dataloader.fetcher"]], "opendataval.dataloader.noisify": [[99, "module-opendataval.dataloader.noisify"]], "opendataval.dataloader.register": [[99, "module-opendataval.dataloader.register"]], "opendataval.dataloader.util": [[99, "module-opendataval.dataloader.util"]], "save() (opendataval.dataloader.util.folderdataset method)": [[99, "opendataval.dataloader.util.FolderDataset.save"]], "setup() (opendataval.dataloader.fetcher.datafetcher class method)": [[99, "opendataval.dataloader.fetcher.DataFetcher.setup"]], "shape (opendataval.dataloader.util.folderdataset property)": [[99, "opendataval.dataloader.util.FolderDataset.shape"]], "split_dataset_by_count() (opendataval.dataloader.fetcher.datafetcher method)": [[99, "opendataval.dataloader.fetcher.DataFetcher.split_dataset_by_count"]], "split_dataset_by_indices() (opendataval.dataloader.fetcher.datafetcher method)": [[99, "opendataval.dataloader.fetcher.DataFetcher.split_dataset_by_indices"]], "split_dataset_by_prop() (opendataval.dataloader.fetcher.datafetcher method)": [[99, "opendataval.dataloader.fetcher.DataFetcher.split_dataset_by_prop"]], "transform (opendataval.dataloader.util.indextransformdataset property)": [[99, "opendataval.dataloader.util.IndexTransformDataset.transform"]], "write() (opendataval.dataloader.util.folderdataset method)": [[99, "opendataval.dataloader.util.FolderDataset.write"]], "bertembeddings() (in module opendataval.dataloader.datasets.nlpsets)": [[100, "opendataval.dataloader.datasets.nlpsets.BertEmbeddings"]], "challenge_url (in module opendataval.dataloader.datasets.challenge)": [[100, "opendataval.dataloader.datasets.challenge.CHALLENGE_URL"]], "resnetembeding() (in module opendataval.dataloader.datasets.imagesets)": [[100, "opendataval.dataloader.datasets.imagesets.ResnetEmbeding"]], "visionadapter (class in opendataval.dataloader.datasets.imagesets)": [[100, "opendataval.dataloader.datasets.imagesets.VisionAdapter"]], "basename() (in module opendataval.dataloader.datasets.challenge)": [[100, "opendataval.dataloader.datasets.challenge.basename"]], "bbc_embedding() (in module opendataval.dataloader.datasets.nlpsets)": [[100, "opendataval.dataloader.datasets.nlpsets.bbc_embedding"]], "cifar10 (in module opendataval.dataloader.datasets.imagesets)": [[100, "opendataval.dataloader.datasets.imagesets.cifar10"]], "cifar100 (in module opendataval.dataloader.datasets.imagesets)": [[100, "opendataval.dataloader.datasets.imagesets.cifar100"]], "cifar10_embed() (in module opendataval.dataloader.datasets.imagesets)": [[100, "opendataval.dataloader.datasets.imagesets.cifar10_embed"]], "download_2dplanes() (in module opendataval.dataloader.datasets.datasets)": [[100, "opendataval.dataloader.datasets.datasets.download_2dplanes"]], "download_miniboone() (in module opendataval.dataloader.datasets.datasets)": [[100, "opendataval.dataloader.datasets.datasets.download_MiniBooNE"]], "download_adult() (in module opendataval.dataloader.datasets.datasets)": [[100, "opendataval.dataloader.datasets.datasets.download_adult"]], "download_bbc() (in module opendataval.dataloader.datasets.nlpsets)": [[100, "opendataval.dataloader.datasets.nlpsets.download_bbc"]], "download_breast_cancer() (in module opendataval.dataloader.datasets.datasets)": [[100, "opendataval.dataloader.datasets.datasets.download_breast_cancer"]], "download_creditcard() (in module opendataval.dataloader.datasets.datasets)": [[100, "opendataval.dataloader.datasets.datasets.download_creditcard"]], "download_diabetes() (in module opendataval.dataloader.datasets.datasets)": [[100, "opendataval.dataloader.datasets.datasets.download_diabetes"]], "download_digits() (in module opendataval.dataloader.datasets.datasets)": [[100, "opendataval.dataloader.datasets.datasets.download_digits"]], "download_drive() (in module opendataval.dataloader.datasets.challenge)": [[100, "opendataval.dataloader.datasets.challenge.download_drive"]], "download_echomonths() (in module opendataval.dataloader.datasets.datasets)": [[100, "opendataval.dataloader.datasets.datasets.download_echoMonths"]], "download_election() (in module opendataval.dataloader.datasets.datasets)": [[100, "opendataval.dataloader.datasets.datasets.download_election"]], "download_electricity() (in module opendataval.dataloader.datasets.datasets)": [[100, "opendataval.dataloader.datasets.datasets.download_electricity"]], "download_fried() (in module opendataval.dataloader.datasets.datasets)": [[100, "opendataval.dataloader.datasets.datasets.download_fried"]], "download_imdb() (in module opendataval.dataloader.datasets.nlpsets)": [[100, "opendataval.dataloader.datasets.nlpsets.download_imdb"]], "download_iris() (in module opendataval.dataloader.datasets.datasets)": [[100, "opendataval.dataloader.datasets.datasets.download_iris"]], "download_linnerud() (in module opendataval.dataloader.datasets.datasets)": [[100, "opendataval.dataloader.datasets.datasets.download_linnerud"]], "download_lowbwt() (in module opendataval.dataloader.datasets.datasets)": [[100, "opendataval.dataloader.datasets.datasets.download_lowbwt"]], "download_mv() (in module opendataval.dataloader.datasets.datasets)": [[100, "opendataval.dataloader.datasets.datasets.download_mv"]], "download_nomao() (in module opendataval.dataloader.datasets.datasets)": [[100, "opendataval.dataloader.datasets.datasets.download_nomao"]], "download_pol() (in module opendataval.dataloader.datasets.datasets)": [[100, "opendataval.dataloader.datasets.datasets.download_pol"]], "download_stock() (in module opendataval.dataloader.datasets.datasets)": [[100, "opendataval.dataloader.datasets.datasets.download_stock"]], "download_wave_energy() (in module opendataval.dataloader.datasets.datasets)": [[100, "opendataval.dataloader.datasets.datasets.download_wave_energy"]], "fashion (in module opendataval.dataloader.datasets.imagesets)": [[100, "opendataval.dataloader.datasets.imagesets.fashion"]], "gaussian_classifier() (in module opendataval.dataloader.datasets.datasets)": [[100, "opendataval.dataloader.datasets.datasets.gaussian_classifier"]], "imdb_embedding() (in module opendataval.dataloader.datasets.nlpsets)": [[100, "opendataval.dataloader.datasets.nlpsets.imdb_embedding"]], "iris_challenge() (in module opendataval.dataloader.datasets.challenge)": [[100, "opendataval.dataloader.datasets.challenge.iris_challenge"]], "load_openml() (in module opendataval.dataloader.datasets.datasets)": [[100, "opendataval.dataloader.datasets.datasets.load_openml"]], "numbers (in module opendataval.dataloader.datasets.imagesets)": [[100, "opendataval.dataloader.datasets.imagesets.numbers"]], "opendataval.dataloader.datasets.challenge": [[100, "module-opendataval.dataloader.datasets.challenge"]], "show_image() (in module opendataval.dataloader.datasets.imagesets)": [[100, "opendataval.dataloader.datasets.imagesets.show_image"]], "stl10_embed() (in module opendataval.dataloader.datasets.imagesets)": [[100, "opendataval.dataloader.datasets.imagesets.stl10_embed"]], "svhn_embed() (in module opendataval.dataloader.datasets.imagesets)": [[100, "opendataval.dataloader.datasets.imagesets.svhn_embed"]], "dataevaluator (class in opendataval.dataval.api)": [[101, "opendataval.dataval.api.DataEvaluator"]], "evaluators (opendataval.dataval.api.dataevaluator attribute)": [[101, "opendataval.dataval.api.DataEvaluator.Evaluators"]], "modellessmixin (class in opendataval.dataval.api)": [[101, "opendataval.dataval.api.ModelLessMixin"]], "modelmixin (class in opendataval.dataval.api)": [[101, "opendataval.dataval.api.ModelMixin"]], "data_values (opendataval.dataval.api.dataevaluator property)": [[101, "opendataval.dataval.api.DataEvaluator.data_values"]], "embeddings() (opendataval.dataval.api.modellessmixin method)": [[101, "opendataval.dataval.api.ModelLessMixin.embeddings"]], "evaluate() (opendataval.dataval.api.modelmixin method)": [[101, "opendataval.dataval.api.ModelMixin.evaluate"]], "evaluate_data_values() (opendataval.dataval.api.dataevaluator method)": [[101, "opendataval.dataval.api.DataEvaluator.evaluate_data_values"]], "input_data() (opendataval.dataval.api.dataevaluator method)": [[101, "opendataval.dataval.api.DataEvaluator.input_data"]], "input_fetcher() (opendataval.dataval.api.dataevaluator method)": [[101, "opendataval.dataval.api.DataEvaluator.input_fetcher"]], "input_metric() (opendataval.dataval.api.modelmixin method)": [[101, "opendataval.dataval.api.ModelMixin.input_metric"]], "input_model() (opendataval.dataval.api.modelmixin method)": [[101, "opendataval.dataval.api.ModelMixin.input_model"]], "input_model_metric() (opendataval.dataval.api.modelmixin method)": [[101, "opendataval.dataval.api.ModelMixin.input_model_metric"]], "opendataval.dataval.api": [[101, "module-opendataval.dataval.api"]], "setup() (opendataval.dataval.api.dataevaluator method)": [[101, "opendataval.dataval.api.DataEvaluator.setup"]], "train() (opendataval.dataval.api.dataevaluator method)": [[101, "opendataval.dataval.api.DataEvaluator.train"]], "train_data_values() (opendataval.dataval.api.dataevaluator method)": [[101, "opendataval.dataval.api.DataEvaluator.train_data_values"]], "ame (class in opendataval.dataval.ame.ame)": [[102, "opendataval.dataval.ame.ame.AME"]], "baggingevaluator (class in opendataval.dataval.ame.ame)": [[102, "opendataval.dataval.ame.ame.BaggingEvaluator"]], "evaluate_data_values() (opendataval.dataval.ame.ame.ame method)": [[102, "opendataval.dataval.ame.ame.AME.evaluate_data_values"]], "evaluate_data_values() (opendataval.dataval.ame.ame.baggingevaluator method)": [[102, "opendataval.dataval.ame.ame.BaggingEvaluator.evaluate_data_values"]], "get_subset_perf() (opendataval.dataval.ame.ame.baggingevaluator method)": [[102, "opendataval.dataval.ame.ame.BaggingEvaluator.get_subset_perf"]], "input_data() (opendataval.dataval.ame.ame.baggingevaluator method)": [[102, "opendataval.dataval.ame.ame.BaggingEvaluator.input_data"]], "opendataval.dataval.ame": [[102, "module-opendataval.dataval.ame"]], "opendataval.dataval.ame.ame": [[102, "module-opendataval.dataval.ame.ame"]], "train_data_values() (opendataval.dataval.ame.ame.ame method)": [[102, "opendataval.dataval.ame.ame.AME.train_data_values"]], "train_data_values() (opendataval.dataval.ame.ame.baggingevaluator method)": [[102, "opendataval.dataval.ame.ame.BaggingEvaluator.train_data_values"]], "classwiseshapley (class in opendataval.dataval.csshap.csshap)": [[103, "opendataval.dataval.csshap.csshap.ClassWiseShapley"]], "evaluate_data_values() (opendataval.dataval.csshap.csshap.classwiseshapley method)": [[103, "opendataval.dataval.csshap.csshap.ClassWiseShapley.evaluate_data_values"]], "input_data() (opendataval.dataval.csshap.csshap.classwiseshapley method)": [[103, "opendataval.dataval.csshap.csshap.ClassWiseShapley.input_data"]], "opendataval.dataval.csshap": [[103, "module-opendataval.dataval.csshap"]], "opendataval.dataval.csshap.csshap": [[103, "module-opendataval.dataval.csshap.csshap"]], "train_data_values() (opendataval.dataval.csshap.csshap.classwiseshapley method)": [[103, "opendataval.dataval.csshap.csshap.ClassWiseShapley.train_data_values"]], "dvrl (class in opendataval.dataval.dvrl.dvrl)": [[104, "opendataval.dataval.dvrl.dvrl.DVRL"]], "datavalueestimatorrl (class in opendataval.dataval.dvrl.dvrl)": [[104, "opendataval.dataval.dvrl.dvrl.DataValueEstimatorRL"]], "dveloss (class in opendataval.dataval.dvrl.dvrl)": [[104, "opendataval.dataval.dvrl.dvrl.DveLoss"]], "evaluate_data_values() (opendataval.dataval.dvrl.dvrl.dvrl method)": [[104, "opendataval.dataval.dvrl.dvrl.DVRL.evaluate_data_values"]], "forward() (opendataval.dataval.dvrl.dvrl.datavalueestimatorrl method)": [[104, "opendataval.dataval.dvrl.dvrl.DataValueEstimatorRL.forward"]], "forward() (opendataval.dataval.dvrl.dvrl.dveloss method)": [[104, "opendataval.dataval.dvrl.dvrl.DveLoss.forward"]], "input_data() (opendataval.dataval.dvrl.dvrl.dvrl method)": [[104, "opendataval.dataval.dvrl.dvrl.DVRL.input_data"]], "opendataval.dataval.dvrl": [[104, "module-opendataval.dataval.dvrl"]], "opendataval.dataval.dvrl.dvrl": [[104, "module-opendataval.dataval.dvrl.dvrl"]], "train_data_values() (opendataval.dataval.dvrl.dvrl.dvrl method)": [[104, "opendataval.dataval.dvrl.dvrl.DVRL.train_data_values"]], "influencefunction (class in opendataval.dataval.influence.influence)": [[105, "opendataval.dataval.influence.influence.InfluenceFunction"]], "influencesubsample (class in opendataval.dataval.influence.infsub)": [[105, "opendataval.dataval.influence.infsub.InfluenceSubsample"]], "evaluate_data_values() (opendataval.dataval.influence.influence.influencefunction method)": [[105, "opendataval.dataval.influence.influence.InfluenceFunction.evaluate_data_values"]], "evaluate_data_values() (opendataval.dataval.influence.infsub.influencesubsample method)": [[105, "opendataval.dataval.influence.infsub.InfluenceSubsample.evaluate_data_values"]], "input_data() (opendataval.dataval.influence.influence.influencefunction method)": [[105, "opendataval.dataval.influence.influence.InfluenceFunction.input_data"]], "input_data() (opendataval.dataval.influence.infsub.influencesubsample method)": [[105, "opendataval.dataval.influence.infsub.InfluenceSubsample.input_data"]], "input_model() (opendataval.dataval.influence.influence.influencefunction method)": [[105, "opendataval.dataval.influence.influence.InfluenceFunction.input_model"]], "opendataval.dataval.influence": [[105, "module-opendataval.dataval.influence"]], "opendataval.dataval.influence.influence": [[105, "module-opendataval.dataval.influence.influence"]], "opendataval.dataval.influence.infsub": [[105, "module-opendataval.dataval.influence.infsub"]], "train_data_values() (opendataval.dataval.influence.influence.influencefunction method)": [[105, "opendataval.dataval.influence.influence.InfluenceFunction.train_data_values"]], "train_data_values() (opendataval.dataval.influence.infsub.influencesubsample method)": [[105, "opendataval.dataval.influence.infsub.InfluenceSubsample.train_data_values"]], "knnshapley (class in opendataval.dataval.knnshap.knnshap)": [[106, "opendataval.dataval.knnshap.knnshap.KNNShapley"]], "evaluate_data_values() (opendataval.dataval.knnshap.knnshap.knnshapley method)": [[106, "opendataval.dataval.knnshap.knnshap.KNNShapley.evaluate_data_values"]], "match() (opendataval.dataval.knnshap.knnshap.knnshapley method)": [[106, "opendataval.dataval.knnshap.knnshap.KNNShapley.match"]], "opendataval.dataval.knnshap": [[106, "module-opendataval.dataval.knnshap"]], "opendataval.dataval.knnshap.knnshap": [[106, "module-opendataval.dataval.knnshap.knnshap"]], "train_data_values() (opendataval.dataval.knnshap.knnshap.knnshapley method)": [[106, "opendataval.dataval.knnshap.knnshap.KNNShapley.train_data_values"]], "datasetdistance (class in opendataval.dataval.lava.otdd)": [[107, "opendataval.dataval.lava.otdd.DatasetDistance"]], "featurecost (class in opendataval.dataval.lava.otdd)": [[107, "opendataval.dataval.lava.otdd.FeatureCost"]], "lavaevaluator (class in opendataval.dataval.lava.lava)": [[107, "opendataval.dataval.lava.lava.LavaEvaluator"]], "batch_augmented_cost() (in module opendataval.dataval.lava.otdd)": [[107, "opendataval.dataval.lava.otdd.batch_augmented_cost"]], "dual_sol() (opendataval.dataval.lava.otdd.datasetdistance method)": [[107, "opendataval.dataval.lava.otdd.DatasetDistance.dual_sol"]], "evaluate_data_values() (opendataval.dataval.lava.lava.lavaevaluator method)": [[107, "opendataval.dataval.lava.lava.LavaEvaluator.evaluate_data_values"]], "extract_dataset() (in module opendataval.dataval.lava.otdd)": [[107, "opendataval.dataval.lava.otdd.extract_dataset"]], "macos_fix() (in module opendataval.dataval.lava.lava)": [[107, "opendataval.dataval.lava.lava.macos_fix"]], "opendataval.dataval.lava": [[107, "module-opendataval.dataval.lava"]], "opendataval.dataval.lava.lava": [[107, "module-opendataval.dataval.lava.lava"]], "opendataval.dataval.lava.otdd": [[107, "module-opendataval.dataval.lava.otdd"]], "pwdist_exact() (in module opendataval.dataval.lava.otdd)": [[107, "opendataval.dataval.lava.otdd.pwdist_exact"]], "train_data_values() (opendataval.dataval.lava.lava.lavaevaluator method)": [[107, "opendataval.dataval.lava.lava.LavaEvaluator.train_data_values"]], "betashapley (class in opendataval.dataval.margcontrib.betashap)": [[108, "opendataval.dataval.margcontrib.betashap.BetaShapley"]], "cache (opendataval.dataval.margcontrib.sampler.grtmcsampler attribute)": [[108, "opendataval.dataval.margcontrib.sampler.GrTMCSampler.CACHE"]], "cache (opendataval.dataval.margcontrib.sampler.montecarlosampler attribute)": [[108, "opendataval.dataval.margcontrib.sampler.MonteCarloSampler.CACHE"]], "cache (opendataval.dataval.margcontrib.sampler.tmcsampler attribute)": [[108, "opendataval.dataval.margcontrib.sampler.TMCSampler.CACHE"]], "databanzhaf (class in opendataval.dataval.margcontrib.banzhaf)": [[108, "opendataval.dataval.margcontrib.banzhaf.DataBanzhaf"]], "databanzhafmargcontrib (class in opendataval.dataval.margcontrib.banzhaf)": [[108, "opendataval.dataval.margcontrib.banzhaf.DataBanzhafMargContrib"]], "datashapley (class in opendataval.dataval.margcontrib.datashap)": [[108, "opendataval.dataval.margcontrib.datashap.DataShapley"]], "gr_max (opendataval.dataval.margcontrib.sampler.grtmcsampler attribute)": [[108, "opendataval.dataval.margcontrib.sampler.GrTMCSampler.GR_MAX"]], "grtmcsampler (class in opendataval.dataval.margcontrib.sampler)": [[108, "opendataval.dataval.margcontrib.sampler.GrTMCSampler"]], "leaveoneout (class in opendataval.dataval.margcontrib.loo)": [[108, "opendataval.dataval.margcontrib.loo.LeaveOneOut"]], "montecarlosampler (class in opendataval.dataval.margcontrib.sampler)": [[108, "opendataval.dataval.margcontrib.sampler.MonteCarloSampler"]], "sampler (class in opendataval.dataval.margcontrib.sampler)": [[108, "opendataval.dataval.margcontrib.sampler.Sampler"]], "shapevaluator (class in opendataval.dataval.margcontrib.shap)": [[108, "opendataval.dataval.margcontrib.shap.ShapEvaluator"]], "tmcsampler (class in opendataval.dataval.margcontrib.sampler)": [[108, "opendataval.dataval.margcontrib.sampler.TMCSampler"]], "compute_marginal_contribution() (opendataval.dataval.margcontrib.sampler.grtmcsampler method)": [[108, "opendataval.dataval.margcontrib.sampler.GrTMCSampler.compute_marginal_contribution"]], "compute_marginal_contribution() (opendataval.dataval.margcontrib.sampler.montecarlosampler method)": [[108, "opendataval.dataval.margcontrib.sampler.MonteCarloSampler.compute_marginal_contribution"]], "compute_marginal_contribution() (opendataval.dataval.margcontrib.sampler.sampler method)": [[108, "opendataval.dataval.margcontrib.sampler.Sampler.compute_marginal_contribution"]], "compute_marginal_contribution() (opendataval.dataval.margcontrib.sampler.tmcsampler method)": [[108, "opendataval.dataval.margcontrib.sampler.TMCSampler.compute_marginal_contribution"]], "compute_weight() (opendataval.dataval.margcontrib.banzhaf.databanzhafmargcontrib method)": [[108, "opendataval.dataval.margcontrib.banzhaf.DataBanzhafMargContrib.compute_weight"]], "compute_weight() (opendataval.dataval.margcontrib.betashap.betashapley method)": [[108, "opendataval.dataval.margcontrib.betashap.BetaShapley.compute_weight"]], "compute_weight() (opendataval.dataval.margcontrib.datashap.datashapley method)": [[108, "opendataval.dataval.margcontrib.datashap.DataShapley.compute_weight"]], "compute_weight() (opendataval.dataval.margcontrib.shap.shapevaluator method)": [[108, "opendataval.dataval.margcontrib.shap.ShapEvaluator.compute_weight"]], "evaluate_data_values() (opendataval.dataval.margcontrib.banzhaf.databanzhaf method)": [[108, "opendataval.dataval.margcontrib.banzhaf.DataBanzhaf.evaluate_data_values"]], "evaluate_data_values() (opendataval.dataval.margcontrib.loo.leaveoneout method)": [[108, "opendataval.dataval.margcontrib.loo.LeaveOneOut.evaluate_data_values"]], "evaluate_data_values() (opendataval.dataval.margcontrib.shap.shapevaluator method)": [[108, "opendataval.dataval.margcontrib.shap.ShapEvaluator.evaluate_data_values"]], "input_data() (opendataval.dataval.margcontrib.banzhaf.databanzhaf method)": [[108, "opendataval.dataval.margcontrib.banzhaf.DataBanzhaf.input_data"]], "input_data() (opendataval.dataval.margcontrib.loo.leaveoneout method)": [[108, "opendataval.dataval.margcontrib.loo.LeaveOneOut.input_data"]], "input_data() (opendataval.dataval.margcontrib.shap.shapevaluator method)": [[108, "opendataval.dataval.margcontrib.shap.ShapEvaluator.input_data"]], "opendataval.dataval.margcontrib": [[108, "module-opendataval.dataval.margcontrib"]], "opendataval.dataval.margcontrib.banzhaf": [[108, "module-opendataval.dataval.margcontrib.banzhaf"]], "opendataval.dataval.margcontrib.betashap": [[108, "module-opendataval.dataval.margcontrib.betashap"]], "opendataval.dataval.margcontrib.datashap": [[108, "module-opendataval.dataval.margcontrib.datashap"]], "opendataval.dataval.margcontrib.loo": [[108, "module-opendataval.dataval.margcontrib.loo"]], "opendataval.dataval.margcontrib.sampler": [[108, "module-opendataval.dataval.margcontrib.sampler"]], "opendataval.dataval.margcontrib.shap": [[108, "module-opendataval.dataval.margcontrib.shap"]], "set_coalition() (opendataval.dataval.margcontrib.sampler.grtmcsampler method)": [[108, "opendataval.dataval.margcontrib.sampler.GrTMCSampler.set_coalition"]], "set_coalition() (opendataval.dataval.margcontrib.sampler.montecarlosampler method)": [[108, "opendataval.dataval.margcontrib.sampler.MonteCarloSampler.set_coalition"]], "set_coalition() (opendataval.dataval.margcontrib.sampler.sampler method)": [[108, "opendataval.dataval.margcontrib.sampler.Sampler.set_coalition"]], "set_coalition() (opendataval.dataval.margcontrib.sampler.tmcsampler method)": [[108, "opendataval.dataval.margcontrib.sampler.TMCSampler.set_coalition"]], "set_evaluator() (opendataval.dataval.margcontrib.sampler.sampler method)": [[108, "opendataval.dataval.margcontrib.sampler.Sampler.set_evaluator"]], "train_data_values() (opendataval.dataval.margcontrib.banzhaf.databanzhaf method)": [[108, "opendataval.dataval.margcontrib.banzhaf.DataBanzhaf.train_data_values"]], "train_data_values() (opendataval.dataval.margcontrib.loo.leaveoneout method)": [[108, "opendataval.dataval.margcontrib.loo.LeaveOneOut.train_data_values"]], "train_data_values() (opendataval.dataval.margcontrib.shap.shapevaluator method)": [[108, "opendataval.dataval.margcontrib.shap.ShapEvaluator.train_data_values"]], "dataoob (class in opendataval.dataval.oob.oob)": [[109, "opendataval.dataval.oob.oob.DataOob"]], "groupingindex (class in opendataval.dataval.oob.oob)": [[109, "opendataval.dataval.oob.oob.GroupingIndex"]], "add_indices() (opendataval.dataval.oob.oob.groupingindex method)": [[109, "opendataval.dataval.oob.oob.GroupingIndex.add_indices"]], "evaluate_data_values() (opendataval.dataval.oob.oob.dataoob method)": [[109, "opendataval.dataval.oob.oob.DataOob.evaluate_data_values"]], "input_data() (opendataval.dataval.oob.oob.dataoob method)": [[109, "opendataval.dataval.oob.oob.DataOob.input_data"]], "opendataval.dataval.oob": [[109, "module-opendataval.dataval.oob"]], "opendataval.dataval.oob.oob": [[109, "module-opendataval.dataval.oob.oob"]], "train_data_values() (opendataval.dataval.oob.oob.dataoob method)": [[109, "opendataval.dataval.oob.oob.DataOob.train_data_values"]], "randomevaluator (class in opendataval.dataval.random.random)": [[110, "opendataval.dataval.random.random.RandomEvaluator"]], "evaluate_data_values() (opendataval.dataval.random.random.randomevaluator method)": [[110, "opendataval.dataval.random.random.RandomEvaluator.evaluate_data_values"]], "opendataval.dataval.random": [[110, "module-opendataval.dataval.random"]], "opendataval.dataval.random.random": [[110, "module-opendataval.dataval.random.random"]], "train_data_values() (opendataval.dataval.random.random.randomevaluator method)": [[110, "opendataval.dataval.random.random.RandomEvaluator.train_data_values"]], "robustvolumeshapley (class in opendataval.dataval.volume.rvs)": [[111, "opendataval.dataval.volume.rvs.RobustVolumeShapley"]], "compute_robust_volumes() (in module opendataval.dataval.volume.rvs)": [[111, "opendataval.dataval.volume.rvs.compute_robust_volumes"]], "compute_x_tilde_and_counts() (in module opendataval.dataval.volume.rvs)": [[111, "opendataval.dataval.volume.rvs.compute_x_tilde_and_counts"]], "evaluate_data_values() (opendataval.dataval.volume.rvs.robustvolumeshapley method)": [[111, "opendataval.dataval.volume.rvs.RobustVolumeShapley.evaluate_data_values"]], "input_data() (opendataval.dataval.volume.rvs.robustvolumeshapley method)": [[111, "opendataval.dataval.volume.rvs.RobustVolumeShapley.input_data"]], "opendataval.dataval.volume": [[111, "module-opendataval.dataval.volume"]], "opendataval.dataval.volume.rvs": [[111, "module-opendataval.dataval.volume.rvs"]], "train_data_values() (opendataval.dataval.volume.rvs.robustvolumeshapley method)": [[111, "opendataval.dataval.volume.rvs.RobustVolumeShapley.train_data_values"]], "experimentmediator (class in opendataval.experiment.api)": [[112, "opendataval.experiment.api.ExperimentMediator"]], "compute_data_values() (opendataval.experiment.api.experimentmediator method)": [[112, "opendataval.experiment.api.ExperimentMediator.compute_data_values"]], "discover_corrupted_sample() (in module opendataval.experiment.exper_methods)": [[112, "opendataval.experiment.exper_methods.discover_corrupted_sample"]], "evaluate() (opendataval.experiment.api.experimentmediator method)": [[112, "opendataval.experiment.api.ExperimentMediator.evaluate"]], "f1_score() (in module opendataval.experiment.util)": [[112, "opendataval.experiment.util.f1_score"]], "filter_kwargs() (in module opendataval.experiment.util)": [[112, "opendataval.experiment.util.filter_kwargs"]], "increasing_bin_removal() (in module opendataval.experiment.exper_methods)": [[112, "opendataval.experiment.exper_methods.increasing_bin_removal"]], "model_factory_setup() (opendataval.experiment.api.experimentmediator class method)": [[112, "opendataval.experiment.api.ExperimentMediator.model_factory_setup"]], "noisy_detection() (in module opendataval.experiment.exper_methods)": [[112, "opendataval.experiment.exper_methods.noisy_detection"]], "oned_twonn_clustering() (in module opendataval.experiment.util)": [[112, "opendataval.experiment.util.oned_twonn_clustering"]], "opendataval.experiment.api": [[112, "module-opendataval.experiment.api"]], "opendataval.experiment.util": [[112, "module-opendataval.experiment.util"]], "plot() (opendataval.experiment.api.experimentmediator method)": [[112, "opendataval.experiment.api.ExperimentMediator.plot"]], "remove_high_low() (in module opendataval.experiment.exper_methods)": [[112, "opendataval.experiment.exper_methods.remove_high_low"]], "save_dataval() (in module opendataval.experiment.exper_methods)": [[112, "opendataval.experiment.exper_methods.save_dataval"]], "save_output() (opendataval.experiment.api.experimentmediator method)": [[112, "opendataval.experiment.api.ExperimentMediator.save_output"]], "set_output_directory() (opendataval.experiment.api.experimentmediator method)": [[112, "opendataval.experiment.api.ExperimentMediator.set_output_directory"]], "setup() (opendataval.experiment.api.experimentmediator class method)": [[112, "opendataval.experiment.api.ExperimentMediator.setup"]], "bertclassifier (class in opendataval.model.bert)": [[113, "opendataval.model.bert.BertClassifier"]], "classifiermlp (class in opendataval.model.mlp)": [[113, "opendataval.model.mlp.ClassifierMLP"]], "classifiersklearnwrapper (class in opendataval.model.api)": [[113, "opendataval.model.api.ClassifierSkLearnWrapper"]], "classifierunweightedsklearnwrapper (class in opendataval.model.api)": [[113, "opendataval.model.api.ClassifierUnweightedSkLearnWrapper"]], "gradientmodel (class in opendataval.model.grad)": [[113, "opendataval.model.grad.GradientModel"]], "lenet (class in opendataval.model.lenet)": [[113, "opendataval.model.lenet.LeNet"]], "logisticregression (class in opendataval.model.logistic_regression)": [[113, "opendataval.model.logistic_regression.LogisticRegression"]], "model (class in opendataval.model.api)": [[113, "opendataval.model.api.Model"]], "models (opendataval.model.api.model attribute)": [[113, "opendataval.model.api.Model.Models"]], "regressionmlp (class in opendataval.model.mlp)": [[113, "opendataval.model.mlp.RegressionMLP"]], "regressionsklearnwrapper (class in opendataval.model.api)": [[113, "opendataval.model.api.RegressionSkLearnWrapper"]], "torchclassmixin (class in opendataval.model.api)": [[113, "opendataval.model.api.TorchClassMixin"]], "torchgradmixin (class in opendataval.model.grad)": [[113, "opendataval.model.grad.TorchGradMixin"]], "torchmodel (class in opendataval.model.api)": [[113, "opendataval.model.api.TorchModel"]], "torchpredictmixin (class in opendataval.model.api)": [[113, "opendataval.model.api.TorchPredictMixin"]], "torchregressmixin (class in opendataval.model.api)": [[113, "opendataval.model.api.TorchRegressMixin"]], "clone() (opendataval.model.api.model method)": [[113, "opendataval.model.api.Model.clone"]], "device (opendataval.model.api.torchmodel property)": [[113, "opendataval.model.api.TorchModel.device"]], "fit() (opendataval.model.api.classifiersklearnwrapper method)": [[113, "opendataval.model.api.ClassifierSkLearnWrapper.fit"]], "fit() (opendataval.model.api.classifierunweightedsklearnwrapper method)": [[113, "opendataval.model.api.ClassifierUnweightedSkLearnWrapper.fit"]], "fit() (opendataval.model.api.model method)": [[113, "opendataval.model.api.Model.fit"]], "fit() (opendataval.model.api.regressionsklearnwrapper method)": [[113, "opendataval.model.api.RegressionSkLearnWrapper.fit"]], "fit() (opendataval.model.api.torchclassmixin method)": [[113, "opendataval.model.api.TorchClassMixin.fit"]], "fit() (opendataval.model.api.torchregressmixin method)": [[113, "opendataval.model.api.TorchRegressMixin.fit"]], "fit() (opendataval.model.bert.bertclassifier method)": [[113, "opendataval.model.bert.BertClassifier.fit"]], "forward() (opendataval.model.bert.bertclassifier method)": [[113, "opendataval.model.bert.BertClassifier.forward"]], "forward() (opendataval.model.lenet.lenet method)": [[113, "opendataval.model.lenet.LeNet.forward"]], "forward() (opendataval.model.logistic_regression.logisticregression method)": [[113, "opendataval.model.logistic_regression.LogisticRegression.forward"]], "forward() (opendataval.model.mlp.classifiermlp method)": [[113, "opendataval.model.mlp.ClassifierMLP.forward"]], "forward() (opendataval.model.mlp.regressionmlp method)": [[113, "opendataval.model.mlp.RegressionMLP.forward"]], "grad() (opendataval.model.grad.gradientmodel method)": [[113, "opendataval.model.grad.GradientModel.grad"]], "grad() (opendataval.model.grad.torchgradmixin method)": [[113, "opendataval.model.grad.TorchGradMixin.grad"]], "opendataval.model.api": [[113, "module-opendataval.model.api"]], "opendataval.model.bert": [[113, "module-opendataval.model.bert"]], "opendataval.model.grad": [[113, "module-opendataval.model.grad"]], "opendataval.model.lenet": [[113, "module-opendataval.model.lenet"]], "opendataval.model.logistic_regression": [[113, "module-opendataval.model.logistic_regression"]], "opendataval.model.mlp": [[113, "module-opendataval.model.mlp"]], "predict() (opendataval.model.api.classifiersklearnwrapper method)": [[113, "opendataval.model.api.ClassifierSkLearnWrapper.predict"]], "predict() (opendataval.model.api.model method)": [[113, "opendataval.model.api.Model.predict"]], "predict() (opendataval.model.api.regressionsklearnwrapper method)": [[113, "opendataval.model.api.RegressionSkLearnWrapper.predict"]], "predict() (opendataval.model.api.torchpredictmixin method)": [[113, "opendataval.model.api.TorchPredictMixin.predict"]], "predict() (opendataval.model.bert.bertclassifier method)": [[113, "opendataval.model.bert.BertClassifier.predict"]], "to_numpy() (in module opendataval.model.api)": [[113, "opendataval.model.api.to_numpy"]], "tokenize() (opendataval.model.bert.bertclassifier method)": [[113, "opendataval.model.bert.BertClassifier.tokenize"]], "training (opendataval.model.api.torchclassmixin attribute)": [[113, "opendataval.model.api.TorchClassMixin.training"]], "training (opendataval.model.api.torchpredictmixin attribute)": [[113, "opendataval.model.api.TorchPredictMixin.training"]], "training (opendataval.model.api.torchregressmixin attribute)": [[113, "opendataval.model.api.TorchRegressMixin.training"]], "training (opendataval.model.grad.torchgradmixin attribute)": [[113, "opendataval.model.grad.TorchGradMixin.training"]]}})